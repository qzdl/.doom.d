#+title: Emacs Configuration

* Globals
** Global Bindings :kbd:
These Key Binds Are focused around ergonomics more than mnemonics
*** Mouse jumping
#ERGO
<link-to-elisp-doc 'better-jumper-jump-backwards>
#+begin_src emacs-lisp
  (map! "<mouse-8>" 'better-jumper-jump-backward)
  (map! "<mouse-9>" 'better-jumper-jump-forward)
#+end_src

#+RESULTS:

*** Switch {C-x C-k} and {C-x k}
#+begin_src emacs-lisp
(map! "C-x C-k" #'custom/kill-this-buffer)
(map! "C-x k" #'kmacro-keymap)
#+end_src
*** Window control
#+begin_src emacs-lisp
(map! "s-h" #'windmove-left)
(map! "s-j" #'windmove-down)
(map! "s-k" #'windmove-up)
(map! "s-l" #'windmove-right)
#+end_src

#+RESULTS:

*** Buffer control
#+begin_src emacs-lisp
(map! "s-n" #'next-buffer)
(map! "s-p" #'previous-buffer)
#+end_src

#+RESULTS:

*** Switch {C-x} and {C-u}
A tip associated with Dvorak, that is equally charming without the dvorak keyboard layout.
This stellar advice came from [[https://www.emacswiki.org/emacs/DvorakKeyboard][EmacsWiki: Dvorak Keyboard]].
#+begin_src emacs-lisp
(define-key key-translation-map [?\C-x] [?\C-u])
(define-key key-translation-map [?\C-u] [?\C-x])
#+end_src

#+RESULTS:
: [24]

*** Shell pop
#+begin_src emacs-lisp
(map! "C-x C-'" #'+eshell/toggle)
#+end_src

#+RESULTS:

**** TODO Abstract this to a ~user-shell/toggle~ function
incase the shell needs to be changed
*** ROT13 buffer
#+begin_src emacs-lisp
(map! "s-B" 'toggle-rot13-mode)
#+end_src
** Functions :func:
*** UTC Timestamp
#+begin_src emacs-lisp
(defun qzdl/utc-timestamp ()
  (format-time-string "%Y%m%dT%H%M%SZ" (current-time) t))
#+end_src

#+RESULTS:
: qzdl/utc-timestamp
*** toggle between non-nil -> [ 0 | 1 ], [ on | off ]
This function is used for quality of life in ensuring correct bottom values are
used when toggling modes; the set of activation values are not necessarily using
~[t | nil]~, but can be =[(t n>0) | n<=0]=, which can throw a spanner in the
works for a regular style ~(mode (setq toggle (not toggle)))~ type of
arrangement, given ~[t | nil]~.

An example of this can be found in [[Time in the modeline]], or [[Toggle
ERROR_ROLLBACK]]. Equal is used here to coerce non-numeric arguments into
something that will toggle.
#+begin_src emacs-lisp
(defun qzdl/toggle-1->0 (n)
  (if (equal 1 n) 0 1))

(defun qzdl/toggle-on->off (n)
  (if (equal 1 n) "on" "off"))
#+end_src
*** pprint with ~cl-prettyprint~
[[https://stackoverflow.com/questions/3552106/pprint-in-emacs-lisp][elisp - PPRINT in Emacs Lisp? - Stack Overflow]]

#+begin_src emacs-lisp
(defun qz/pprint (form &optional output-stream)
  (princ (with-temp-buffer
           (cl-prettyprint form)
           (buffer-string))
         output-stream))
#+end_src
* Doom Tweaks
** ID & Email :vars:
#+begin_src emacs-lisp
(setq user-full-name "Samuel Culpepper"
      user-mail-address "samuel@samuelculpepper.com")
#+end_src
* System Specific
xps:
  base
  (font . 30)
  (display . "eDP-1")
  uw
  (font . 15)
  (display . "HDMI-1")
  (randr . "--scale 2x2")

fuj:
  base
  (font . 15)
  (display . "eDP-1")
  uw
  (font . 15)
  (display . "DP-1")
* Visual
** Fonts & Text :vars:

#+begin_src emacs-lisp
(setq doom-font (font-spec :family "Fira Mono" :size 32))
(setq doom-theme nil)
(setq doom-modeline-height 10)
(setq display-line-numbers-type nil)
(set-language-environment "UTF-8")
(set-default-coding-systems 'utf-8)
#+end_src

#+RESULTS:
: (utf-8-unix . utf-8-unix)

** Tooltips :init:
#+begin_src emacs-lisp
(tooltip-mode 1)
#+end_src
** Time in the modeline :kbd:
An example of this can be found in [[Time in the modeline]]. Equal is used here to
coerce non-numeric arguments into something that will toggle.
#+begin_src emacs-lisp
(setq qzdl/toggle-time-state t)
(display-time-mode qzdl/toggle-time-state)

(defun qzdl/toggle-time-in-modeline ()
  (interactive)
  (message
   (concat "Time display in modeline is "
           (if (display-time-mode
                (setq qzdl/toggle-time-state
                      (qzdl/toggle-1->0 qzdl/toggle-time-state)))
               "on" "off"))))

(map! :leader
      (:prefix-map ("t" . "toggle")
       :desc "Time in the modeline"   "T" #'qzdl/toggle-time-in-modeline))
#+end_src

** Elegance :init:
#+begin_src emacs-lisp
(load! "elegance/elegance.el")
(load! "elegance/sanity.el")
#+end_src
** Writeroom :vars:
When centering, use all available width, and respond to resizing somethinh
12345678901234567890123456789012345678901234567890123456789012345678901234567890
somethingh som
#+begin_src emacs-lisp
(setq writeroom-width 80)

(add-to-list 'writeroom-mode-hook
             (lambda () (setq writeroom-border-width 50)))

#+end_src
** Theme :func:
#+begin_src emacs-lisp
(defun qzdl/load-tron-legacy ()
  (interactive)
  (add-to-list 'custom-theme-load-path "~/.emacs.d/.local/straight/repos/tron-legacy-emacs-theme/")
  (load-theme 'tron-legacy t)
  (setq tron-legacy-vivid-cursor t))

(defun qzdl/load-k ()
  (interactive)
  (load-theme 'k t))

(defun qzdl/load-pink-mountain ()
  (interactive)
  (load-theme 'pink-mountain t))
#+end_src
** ivy-posframe :init:
[[https://github.com/tumashu/ivy-posframe][GitHub - tumashu/ivy-posframe: ivy-posframe is a ivy extension, which let ivy...]]

#+begin_src emacs-lisp :tangle no
(require 'ivy-posframe)
(setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-window-center)))
(add-hook! 'exwm-init-hook
  (after! ivy-posframe
    (add-to-list 'ivy-posframe-parameters '(parent-frame . nil))))
(ivy-posframe-mode 1)
#+end_src
** Transparency :func:
Totally stolen from [[https://www.emacswiki.org/emacs/TransparentEmacs][EmacsWiki: Transparent Emacs]].
#+begin_src emacs-lisp
(setq qzdl/preferred-transparency-alpha '(80 . 70))

(set-frame-parameter (selected-frame) 'alpha qzdl/preferred-transparency-alpha)
(add-to-list 'default-frame-alist `(alpha . ,qzdl/preferred-transparency-alpha))

(defun qzdl/toggle-transparency ()
  "Toggle between max opacity and `qzdl/preferred-transparency-alpha'"
  (interactive)
  (let ((alpha (frame-parameter nil 'alpha)))
    (set-frame-parameter
     nil 'alpha
     (if (eql (cond ((numberp alpha) alpha)
                    ((numberp (cdr alpha)) (cdr alpha))
                    ;; Also handle undocumented (<active> <inactive>) form.
                    ((numberp (cadr alpha)) (cadr alpha)))
              100)
         qzdl/preferred-transparency-alpha '(100 . 100))))
  (message (concat "Frame transparency set to "
                   (number-to-string (car (frame-parameter nil 'alpha))))))
#+end_src

#+RESULTS:
: qzdl/toggle-transparency

** bgex :init:
To create a source image, run ~convert a.png a.xpm~
#+begin_src emacs-lisp :tangle no
(load-file "~/.doom.d/snippets/bgex.el")
(require 'bgex)

;; Image on frame (dynamic color mode (SRC * DST / factor))
;; (bgex-set-image-default "~/.config/wall.xpm" t)
;; Color for HTML-mode (dynamic color mode)
;; (bgex-set-color "HTML" 'bgex-identifier-type-major-mode '(60000 40000 40000) t)

;; ;; Color for buffer-name (*scratch*)
;; (bgex-set-color "*scratch*" 'bgex-identifier-type-buffer-name "skyblue")
;; (bgex-set-color-default "skyblue")
;; ;; XPM string
;; (bgex-set-xpm-string "*scratch*" 'bgex-identifier-type-buffer-name "XPM string" t)
;; (bgex-set-xpm-string-default "XPM strging" t)
#+end_src

#+RESULTS:
: bgex
** perfect-margin
#+begin_src emacs-lisp
(perfect-margin-mode 1)
#+end_src
* EXWM
** Initialisation :func:init:
#+begin_src emacs-lisp
(require 'exwm-randr)

(defun qzdl/exwm-ultrawide ()
  (interactive)
  (setq exwm-randr-workspace-monitor-plist '(0 "DP-1"))
  (add-hook 'exwm-randr-screen-change-hook
            (lambda ()(start-process-shell-command "xrandr" nil
                                              "xrandr --output DP-1 --mode 5120x1440 --primary --output eDP-1 --off")))
  (exwm-randr-enable))

(defun qzdl/exwm-tpb ()
  (interactive)
  (setq exwm-randr-workspace-monitor-plist '(0 "eDP-1" 1 "DP-1"))
  (add-hook 'exwm-randr-screen-change-hook
            (lambda ()(start-process-shell-command "xrandr" nil
                                              "xrandr --output HDMI-2 --off --output HDMI-1 --off --output DP-1 --mode 1680x1050 --pos 1920x0 --rotate normal --output eDP-1 --primary --mode 1920x1080 --pos 0x920 --rotate normal --output DP-2 --off")))
  (exwm-randr-enable))


(defun qzdl/exwm-110vga ()
  (interactive)
  (setq exwm-randr-workspace-monitor-plist '(0 "eDP-1" 1 "DP-2"))
  (add-hook 'exwm-randr-screen-change-hook
            (lambda ()(start-process-shell-command "xrandr" nil
                                              "xrandr --output HDMI-2 --off --output HDMI-1 --off --output DP-1 --off --output eDP-1 --primary --mode 1920x1080 --pos 0x352 --rotate normal --output DP-2 --mode 1920x1080 --pos 1920x0 --rotate normal")))
  (exwm-randr-enable))

(qzdl/exwm-ultrawide)
(exwm-enable)
#+end_src

#+RESULTS:

** Startup Programs :init:
#+begin_src emacs-lisp
(setq qzdl/startup-programs
      '("compton"
        "unclutter"))

(defun qzdl/run-programs-n-process (p)
  (mapcar (lambda (c) (start-process-shell-command c nil c)) p))

(defun qzdl/seq-to-kill (p)
  (mapcar (lambda (s) (concat "killall " s)) p))

(defun qzdl/run-startup-programs ()
  (interactive)
  (qzdl/run-programs-n-process
   (qzdl/seq-to-kill qzdl/startup-programs))
  (qzdl/run-programs-n-process qzdl/startup-programs))

(qzdl/run-startup-programs)
#+end_src

#+RESULTS:
| compton | unclutter |

** Workspaces & Classes :vars:
#+begin_src emacs-lisp
(require 'exwm)

;; Set the initial workspace number.
(unless (get 'exwm-workspace-number 'saved-value)
  (setq exwm-workspace-number 4))

;; Make class name the buffer name
(add-hook 'exwm-update-class-hook
          (lambda ()
            (exwm-workspace-rename-buffer exwm-class-name)))

;; ensure doom recognises x-windows as 'real' per <link-to-elisp-doc
;; 'doom-real-buffer-p>
 (add-hook 'exwm-mode-hook #'doom-mark-buffer-as-real-h)

(defun qz/mark-this-buffer-as-real ()
  (interactive)
  (doom-mark-buffer-as-real-h))

#+end_src

#+RESULTS:
| lambda | nil | (exwm-workspace-rename-buffer exwm-class-name) |

** Bindings :kbd:
*** Global :kbd:
#+begin_src emacs-lisp
(defun qz/read-process-shell-command (command)
  "Used to launch a program by creating a process. Invokes
`start-process-shell-command' with COMMAND"
  (interactive (list (read-shell-command "λ ")))
  (start-process-shell-command command nil command))

(setq exwm-input-global-keys
      `(([?\s-r] . exwm-reset)                     ;; `s-r': Reset (to line-mode).
        ([?\s-w] . exwm-workspace-switch)          ;; `s-w': Switch workspace.
        ([?\s-&] . qz/read-process-shell-command)  ;; `s-&': Launch program
        ,@(mapcar (lambda (i)                           ;; `s-N': Switch to certain workspace.
                    `(,(kbd (format "s-%d" i)) .   ;; expands to n binds ([s-N] . λ exwm-wsc N)
                      (lambda ()
                        (interactive)
                        (exwm-workspace-switch-create ,i))))
                  (number-sequence 0 9))))



(qz/pprint exwm-input-global-keys)
#+end_src

#+RESULTS:
#+begin_example

(([8388722] . exwm-reset)
 ([8388727] . exwm-workspace-switch)
 ([8388646] . qz/read-process-shell-command)
 ([8388656] lambda nil (interactive) (exwm-workspace-switch-create 0))
 ([8388657] lambda nil (interactive) (exwm-workspace-switch-create 1))
 ([8388658] lambda nil (interactive) (exwm-workspace-switch-create 2))
 ([8388659] lambda nil (interactive) (exwm-workspace-switch-create 3))
 ([8388660] lambda nil (interactive) (exwm-workspace-switch-create 4))
 ([8388661] lambda nil (interactive) (exwm-workspace-switch-create 5))
 ([8388662] lambda nil (interactive) (exwm-workspace-switch-create 6))
 ([8388663] lambda nil (interactive) (exwm-workspace-switch-create 7))
 ([8388664] lambda nil (interactive) (exwm-workspace-switch-create 8))
 ([8388665] lambda nil (interactive) (exwm-workspace-switch-create 9)))
#+end_example

*** Line Editing :kbd:

#+begin_src emacs-lisp
(setq exwm-input-simulation-keys
      '(([?\C-b] . [left])
        ([?\C-f] . [right])
        ([?\C-p] . [up])
        ([?\C-n] . [down])
        ([?\C-a] . [home])
        ([?\C-e] . [end])
        ([?\M-v] . [prior])
        ([?\C-v] . [next])
        ([?\C-d] . [delete])
        ([?\M-d] . [C-delete])
        ([?\M-b] . [C-left])
        ([?\M-f] . [C-right])
        ([?\C-k] . [S-end delete])
        ;; cut/paste.
        ([?\C-w] . [?\C-x])
        ([?\M-w] . [?\C-c])
        ([?\C-y] . [?\C-v])
        ;; search
        ([?\C-s] . [?\C-f])))
#+end_src

#+RESULTS:
: (([2] . [left]) ([6] . [right]) ([16] . [up]) ([14] . [down]) ([1] . [home]) ([5] . [end]) ([134217846] . [prior]) ([22] . [next]) ([4] . [delete]) ([134217828] . [C-delete]) ([134217826] . [C-left]) ([134217830] . [C-right]) ([11] . [S-end delete]) ([23] . [24]) ([134217847] . [3]) ([25] . [22]) ([19] . [6]))

** Wallpaper :init:
<link-to-elisp-doc 'wallpaper-cycle-interval> is measured in seconds, 900 being 15 minutes
#+begin_src emacs-lisp
(setq wallpaper-cycle-interval 900)

(use-package! wallpaper
  :hook ((exwm-randr-screen-change . wallpaper-set-wallpaper)
         (after-init . wallpaper-cycle-mode))
  :custom ((wallpaper-cycle-interval 900)
           (wallpaper-cycle-single t)
           (wallpaper-scaling 'fill)
           (wallpaper-cycle-directory "~/.config/wallpapers")))
#+end_src

#+RESULTS:
| org-roam-mode | hproperty:set-face-after-init | wallpaper-cycle-mode | (closure (t) (&rest _) (progn (if (featurep 'sly) (sly-setup) (eval-after-load 'sly #'(lambda nil (sly-setup)))))) | doom-modeline-mode | doom-init-fonts-h | doom-init-leader-keys-h | x-wm-set-size-hint | tramp-register-archive-file-name-handler | magit-auto-revert-mode--init-kludge | magit-startup-asserts | magit-version | hyperb:init | table--make-cell-map |

* Emacs Server :init:
#+begin_src emacs-lisp
(server-start)
#+end_src

#+RESULTS:

* Hydra
** n :kbd:
The =n= of {C-c n} denotes notes.

#+begin_src emacs-lisp
(map! :leader
      (:prefix-map ("n" . "notes")
       (:prefix-map ("d" . "by date")
          :desc "Arbitrary date" "d" #'org-roam-dailies-date
          :desc "Today"          "t" #'org-roam-dailies-today
          :desc "Tomorrow"       "m" #'org-roam-dailies-tomorrow
          :desc "Yesterday"      "y" #'org-roam-dailies-yesterday)
       "f" #'org-roam-find-file
       "F" #'find-file-in-notes))
#+end_src

#+RESULTS:

* Programming
** SQL
For reference: [[https://www.emacswiki.org/emacs/SqlMode][EmacsWiki: Sql Mode]]
*** Toggle ERROR_ROLLBACK :psql:func:
#+begin_src emacs-lisp
(setq qzdl/psql-error-rollback 0)

(qzdl/toggle-1->0 qzdl/psql-error-rollback)

(defun qzdl/psql-toggle-error-rollback ()
  (interactive)
  (setq qzdl/psql-error-rollback
        (qzdl/toggle-1->0 qzdl/psql-error-rollback))
  (sql-send-string
   (concat "\\set ON_ERROR_ROLLBACK "
           (qzdl/toggle-on->off qzdl/psql-error-rollback)))
  (sql-send-string
   "\\echo ON_ERROR_ROLLBACK is :ON_ERROR_ROLLBACK"))
#+end_src

#+RESULTS:
: qzdl/psql-toggle-error-rollback

*** Upcase SQL Keywords :func:
Lifted from [[https://www.emacswiki.org/emacs/SqlMode#toc4][EmacsWiki: Sql Mode]] (#toc4)
#+begin_src emacs-lisp
  (defun qzdl/upcase-sql-keywords ()
    (interactive)
    (save-excursion
      (dolist (keywords sql-mode-postgres-font-lock-keywords)
        (goto-char (point-min))
        (while (re-search-forward (car keywords) nil t)
          (goto-char (+ 1 (match-beginning 0)))
          (when (eql font-lock-keyword-face (face-at-point))
            (backward-char)
            (upcase-word 1)
            (forward-char))))))
#+end_src

** Common Lisp
*** cl-font-lock-built-in-mode :vars:
"Highlight built-in functions, variables, and types in ‘lisp-mode’."
- Enable feature from 28.1 if exists
  <link-to-elisp-doc 'cl-font-lock-built-in-mode>
#+begin_src emacs-lisp
(if (symbolp 'cl-font-lock-built-in-mode)
    (cl-font-lock-built-in-mode 1))
#+end_src
***
*** sly eval-overlay :func:
Using the handy [[https://github.com/xiongtx/eros][eros]], advice from [[https://www.reddit.com/r/emacs/comments/bi4xk1/evaluation_overlays_in_slime_for_common_lisp/][Evaluation overlays in slime for common lisp : emacs]]
#+begin_src emacs-lisp
(defun qzdl/slime-eval-last-expression-eros ()
  (interactive)
  (destructuring-bind (output value)
      (sly-eval `(slynk:eval-and-grab-output ,(sly-last-expression)))
    (eros--make-result-overlay (concat output value)
      :where (point)
      :duration eros-eval-result-duration)))
#+end_src

** Emacs Lisp
*** eval-defun :kbd:
#+begin_src emacs-lisp
(define-key! emacs-lisp-mode-map "C-c C-c" 'eval-defun)
#+end_src
* Hyperbole
** Initialisation :init:
#+begin_src emacs-lisp
(require 'hyperbole)
#+end_src

#+RESULTS:
: hyperbole

** Action-Key with mouse buttons :kbd:
#+begin_src emacs-lisp
(map! "C-<mouse-2>" #'hkey-either)
#+end_src

#+RESULTS:

* PDF
** Dark-Mode on entry :vars:
This function takes colours from the current [[Theme]], and applies a colour-mask to
the view of the pdf as it's rendered by PDFTools.
#+begin_src emacs-lisp
(add-hook 'pdf-view-mode-hook #'pdf-view-midnight-minor-mode)
#+end_src

#+RESULTS:
| doom-modeline-set-pdf-modeline | pdf-view-midnight-minor-mode |

* KeyFreq :init:
A package that logs command usage; blessed be Xah Lee
#+begin_src emacs-lisp
(keyfreq-mode 1)
(keyfreq-autosave-mode 1)
#+end_src

#+RESULTS:
: t

* Org
** Tweaks :vars:
*** File apps
Handle opening with { C-c C-o } or { RET } or { mouse-1 }
- <link-to-elisp-doc 'org-file-apps>

#+begin_src emacs-lisp
(setq org-file-apps
      '((auto-mode . emacs)
        (directory . emacs)
        ("\\.mm\\'" . default)
        ("\\.x?html?\\'" . default)
        ("\\.pdf\\'" . emacs)))
#+end_src

#+RESULTS:
: ((auto-mode . emacs) (directory . emacs) (\.mm\' . default) (\.x?html?\' . default) (\.pdf\' . emacs))

*** Cleanup ~org-mode-hook~
#+begin_src emacs-lisp
(eval-after-load nil
  (remove-hook 'org-mode-hook #'ob-ipython-auto-configure-kernels))
#+end_src

#+RESULTS:

** Directories :vars:
#+begin_src emacs-lisp
(setq org-directory "~/life/"
      qzdl/notes-directory (concat org-directory "roam/")
      qzdl/org-agenda-directory (concat org-directory "gtd/")
      org-noter-notes-search-path (list qzdl/notes-directory)
      org-roam-directory qzdl/notes-directory)
#+end_src

#+RESULTS:
: ~/life/roam/

** Refile :vars:
#+begin_src emacs-lisp
(setq org-refile-targets '(("next.org" :level . 0)
                           ("someday.org" :level . 0)
                           ("reading.org" :level . 1)
                           ("projects.org" :maxlevel . 1)))
#+end_src

#+RESULTS:
: ((next.org :level . 0) (someday.org :level . 0) (reading.org :level . 1) (projects.org :maxlevel . 1))

** org-mode :init:vars:
#+begin_src emacs-lisp
(use-package! org
  :mode ("\\.org\\'" . org-mode)
  :init
  (map! :leader
        :prefix "n"
        "c" #'org-capture)
  (map! :map org-mode-map
        "M-n" #'outline-next-visible-heading
        "M-p" #'outline-previous-visible-heading)
  (setq org-src-window-setup 'current-window
        org-return-follows-link t
        org-babel-load-languages '((emacs-lisp . t)
                                   ;; (common-lisp . t)
                                   (python . t)
                                   (ipython . t)
                                   (dot . t)
                                   (R . t))
        org-ellipses " ..."
        org-confirm-babel-evaluate nil
        org-use-speed-commands t
        org-catch-invisible-edits 'show
        org-preview-latex-image-directory "/tmp/ltximg/"
        ;; ORG SRC BLOCKS `C-c C-,'
        org-structure-template-alist '(("a" . "export ascii")
                                       ("c" . "center")
                                       ("C" . "comment")
                                       ("e" . "example")
                                       ("E" . "export")
                                       ("h" . "export html")
                                       ("l" . "export latex")
                                       ("q" . "quote")
                                       ("s" . "src")
                                       ("v" . "verse")
                                       ("el" . "src emacs-lisp")
                                       ("d" . "definition")
                                       ("t" . "theorem")))
  (with-eval-after-load 'flycheck
    (flycheck-add-mode 'proselint 'org-mode)))

#+end_src

#+RESULTS:
: ((\.odc\' . archive-mode) (\.odf\' . archive-mode) (\.odi\' . archive-mode) (\.otp\' . archive-mode) (\.odp\' . archive-mode) (\.otg\' . archive-mode) (\.odg\' . archive-mode) (\.ots\' . archive-mode) (\.ods\' . archive-mode) (\.odm\' . archive-mode) (\.ott\' . archive-mode) (\.odt\' . archive-mode) (\.kotl?\' . kotl-mode) (/bspwmrc\' . sh-mode) (\.\(?:zunit\|env\)\' . sh-mode) (/Pipfile\' . conf-mode) ([./]flake8\' . conf-mode) (/README\(?:\.md\)?\' . gfm-mode) (\.tex\' . LaTeX-mode) (\.jl\' . ess-julia-mode) (\.Cask\' . emacs-lisp-mode) (\.rss\' . nxml-mode) (\.xs\(?:d\|lt\)\' . nxml-mode) (\.p\(?:list\|om\)\' . nxml-mode) (\.[pP][dD][fF]\' . pdf-view-mode) (\.\(?:hex\|nes\)\' . hexl-mode) (rc\' . conf-mode) (\.log\' . text-mode) (/LICENSE\' . text-mode) (requirements\.in . pip-requirements-mode) (requirements[^z-a]*\.txt\' . pip-requirements-mode) (\.pip\' . pip-requirements-mode) (\.hva\' . latex-mode) (\.drv\' . latex-mode) (\.cpp[rR]\' . poly-c++r-mode) (\.[Rr]cpp\' . poly-r+c++-mode) (\.[rR]brew\' . poly-brew+r-mode) (\.[rR]html\' . poly-html+r-mode) (\.rapport\' . poly-rapport-mode) (\.[rR]md\' . poly-markdown+r-mode) (\.[rR]nw\' . poly-noweb+r-mode) (\.Snw\' . poly-noweb+r-mode) (\.nw\' . poly-noweb-mode) (\.md\' . poly-markdown-mode) (\.\(?:md\|markdown\|mkd\|mdown\|mkdn\|mdwn\)\' . markdown-mode) (\.ado\' . ess-stata-mode) (\.do\' . ess-stata-mode) (\.[Ss][Aa][Ss]\' . SAS-mode) (\.Sout . S-transcript-mode) (\.[Ss]t\' . S-transcript-mode) (\.Rd\' . Rd-mode) (DESCRIPTION$ . conf-colon-mode) (/Makevars\(\.win\)?$ . makefile-mode) (\.[Rr]out . ess-r-transcript-mode) (CITATION\' . ess-r-mode) (NAMESPACE\' . ess-r-mode) (\.[rR]profile\' . ess-r-mode) (\.[rR]\' . ess-r-mode) (/R/.*\.q\' . ess-r-mode) (\.[Jj][Aa][Gg]\' . ess-jags-mode) (\.[Bb][Mm][Dd]\' . ess-bugs-mode) (\.[Bb][Oo][Gg]\' . ess-bugs-mode) (\.[Bb][Uu][Gg]\' . ess-bugs-mode) (\.jl\' . julia-mode) (\.tsv\' . tsv-mode) (\.[Cc][Ss][Vv]\' . csv-mode) (\(?:build\|profile\)\.boot\' . clojure-mode) (\.cljs\' . clojurescript-mode) (\.cljc\' . clojurec-mode) (\.\(clj\|dtm\|edn\)\' . clojure-mode) (/git-rebase-todo\' . git-rebase-mode) (/git/ignore\' . gitignore-mode) (/info/exclude\' . gitignore-mode) (/\.gitignore\' . gitignore-mode) (/etc/gitconfig\' . gitconfig-mode) (/\.gitmodules\' . gitconfig-mode) (/git/config\' . gitconfig-mode) (/modules/.*/config\' . gitconfig-mode) (/\.git/config\' . gitconfig-mode) (/\.gitconfig\' . gitconfig-mode) (\.gpg\(~\|\.~[0-9]+~\)?\' nil epa-file) (\.\(?:3fr\|a\(?:rw\|vs\)\|bmp[23]?\|c\(?:als?\|myka?\|r[2w]\|u[rt]\)\|d\(?:c[mrx]\|ds\|jvu\|ng\|px\)\|exr\|f\(?:ax\|its\)\|gif\(?:87\)?\|hrz\|ic\(?:on\|[bo]\)\|j\(?:\(?:pe\|[np]\)g\)\|k\(?:25\|dc\)\|m\(?:iff\|ng\|rw\|s\(?:l\|vg\)\|tv\)\|nef\|o\(?:rf\|tb\)\|p\(?:bm\|c\(?:ds\|[dltx]\)\|db\|ef\|gm\|i\(?:ct\|x\)\|jpeg\|n\(?:g\(?:24\|32\|8\)\|[gm]\)\|pm\|sd\|tif\|wp\)\|r\(?:a[fs]\|gb[ao]?\|l[ae]\)\|s\(?:c[rt]\|fw\|gi\|r[2f]\|un\|vgz?\)\|t\(?:ga\|i\(?:ff\(?:64\)?\|le\|m\)\|tf\)\|uyvy\|v\(?:da\|i\(?:car\|d\|ff\)\|st\)\|w\(?:bmp\|pg\)\|x\(?:3f\|bm\|cf\|pm\|wd\|[cv]\)\|y\(?:cbcra?\|uv\)\)\' . image-mode) (\.elc\' . elisp-byte-code-mode) (\.zst\' nil jka-compr) (\.dz\' nil jka-compr) (\.xz\' nil jka-compr) (\.lzma\' nil jka-compr) (\.lz\' nil jka-compr) (\.g?z\' nil jka-compr) (\.bz2\' nil jka-compr) (\.Z\' nil jka-compr) (\.vr[hi]?\' . vera-mode) (\(?:\.\(?:rbw?\|ru\|rake\|thor\|jbuilder\|rabl\|gemspec\|podspec\)\|/\(?:Gem\|Rake\|Cap\|Thor\|Puppet\|Berks\|Vagrant\|Guard\|Pod\)file\)\' . ruby-mode) (\.re?st\' . rst-mode) (\.py[iw]?\' . python-mode) (\.m\' . octave-maybe-mode) (\.less\' . less-css-mode) (\.scss\' . scss-mode) (\.awk\' . awk-mode) (\.\(u?lpc\|pike\|pmod\(\.in\)?\)\' . pike-mode) (\.idl\' . idl-mode) (\.java\' . java-mode) (\.m\' . objc-mode) (\.ii\' . c++-mode) (\.i\' . c-mode) (\.lex\' . c-mode) (\.y\(acc\)?\' . c-mode) (\.h\' . c-or-c++-mode) (\.c\' . c-mode) (\.\(CC?\|HH?\)\' . c++-mode) (\.[ch]\(pp\|xx\|\+\+\)\' . c++-mode) (\.\(cc\|hh\)\' . c++-mode) (\.\(bat\|cmd\)\' . bat-mode) (\.[sx]?html?\(\.[a-zA-Z_]+\)?\' . mhtml-mode) (\.svgz?\' . image-mode) (\.svgz?\' . xml-mode) (\.x[bp]m\' . image-mode) (\.x[bp]m\' . c-mode) (\.p[bpgn]m\' . image-mode) (\.tiff?\' . image-mode) (\.gif\' . image-mode) (\.png\' . image-mode) (\.jpe?g\' . image-mode) (\.te?xt\' . text-mode) (\.[tT]e[xX]\' . tex-mode) (\.ins\' . tex-mode) (\.ltx\' . latex-mode) (\.dtx\' . doctex-mode) (\.org\' . org-mode) (\.el\' . emacs-lisp-mode) (Project\.ede\' . emacs-lisp-mode) (\.\(scm\|stk\|ss\|sch\)\' . scheme-mode) (\.l\' . lisp-mode) (\.li?sp\' . lisp-mode) (\.[fF]\' . fortran-mode) (\.for\' . fortran-mode) (\.p\' . pascal-mode) (\.pas\' . pascal-mode) (\.\(dpr\|DPR\)\' . delphi-mode) (\.ad[abs]\' . ada-mode) (\.ad[bs]\.dg\' . ada-mode) (\.\([pP]\([Llm]\|erl\|od\)\|al\)\' . perl-mode) (Imakefile\' . makefile-imake-mode) (Makeppfile\(?:\.mk\)?\' . makefile-makepp-mode) (\.makepp\' . makefile-makepp-mode) (\.mk\' . makefile-gmake-mode) (\.make\' . makefile-gmake-mode) ([Mm]akefile\' . makefile-gmake-mode) (\.am\' . makefile-automake-mode) (\.texinfo\' . texinfo-mode) (\.te?xi\' . texinfo-mode) (\.[sS]\' . asm-mode) (\.asm\' . asm-mode) (\.css\' . css-mode) (\.mixal\' . mixal-mode) (\.gcov\' . compilation-mode) (/\.[a-z0-9-]*gdbinit . gdb-script-mode) (-gdb\.gdb . gdb-script-mode) ([cC]hange\.?[lL]og?\' . change-log-mode) ([cC]hange[lL]og[-.][0-9]+\' . change-log-mode) (\$CHANGE_LOG\$\.TXT . change-log-mode) (\.scm\.[0-9]*\' . scheme-mode) (\.[ckz]?sh\'\|\.shar\'\|/\.z?profile\' . sh-mode) (\.bash\' . sh-mode) (\(/\|\`\)\.\(bash_\(profile\|history\|log\(in\|out\)\)\|z?log\(in\|out\)\)\' . sh-mode) (\(/\|\`\)\.\(shrc\|zshrc\|m?kshrc\|bashrc\|t?cshrc\|esrc\)\' . sh-mode) (\(/\|\`\)\.\([kz]shenv\|xinitrc\|startxrc\|xsession\)\' . sh-mode) (\.m?spec\' . sh-mode) (\.m[mes]\' . nroff-mode) (\.man\' . nroff-mode) (\.sty\' . latex-mode) (\.cl[so]\' . latex-mode) (\.bbl\' . latex-mode) (\.bib\' . bibtex-mode) (\.bst\' . bibtex-style-mode) (\.sql\' . sql-mode) (\(acinclude\|aclocal\|acsite\)\.m4\' . autoconf-mode) (\.m[4c]\' . m4-mode) (\.mf\' . metafont-mode) (\.mp\' . metapost-mode) (\.vhdl?\' . vhdl-mode) (\.article\' . text-mode) (\.letter\' . text-mode) (\.i?tcl\' . tcl-mode) (\.exp\' . tcl-mode) (\.itk\' . tcl-mode) (\.icn\' . icon-mode) (\.sim\' . simula-mode) (\.mss\' . scribe-mode) (\.f9[05]\' . f90-mode) (\.f0[38]\' . f90-mode) (\.indent\.pro\' . fundamental-mode) (\.\(pro\|PRO\)\' . idlwave-mode) (\.srt\' . srecode-template-mode) (\.prolog\' . prolog-mode) (\.tar\' . tar-mode) (\.\(arc\|zip\|lzh\|lha\|zoo\|[jew]ar\|xpi\|rar\|cbr\|7z\|ARC\|ZIP\|LZH\|LHA\|ZOO\|[JEW]AR\|XPI\|RAR\|CBR\|7Z\)\' . archive-mode) (\.oxt\' . archive-mode) (\.\(deb\|[oi]pk\)\' . archive-mode) (\`/tmp/Re . text-mode) (/Message[0-9]*\' . text-mode) (\`/tmp/fol/ . text-mode) (\.oak\' . scheme-mode) (\.sgml?\' . sgml-mode) (\.x[ms]l\' . xml-mode) (\.dbk\' . xml-mode) (\.dtd\' . sgml-mode) (\.ds\(ss\)?l\' . dsssl-mode) (\.js[mx]?\' . javascript-mode) (\.har\' . javascript-mode) (\.json\' . javascript-mode) (\.[ds]?va?h?\' . verilog-mode) (\.by\' . bovine-grammar-mode) (\.wy\' . wisent-grammar-mode) ([:/\]\..*\(emacs\|gnus\|viper\)\' . emacs-lisp-mode) (\`\..*emacs\' . emacs-lisp-mode) ([:/]_emacs\' . emacs-lisp-mode) (/crontab\.X*[0-9]+\' . shell-script-mode) (\.ml\' . lisp-mode) (\.ld[si]?\' . ld-script-mode) (ld\.?script\' . ld-script-mode) (\.xs\' . c-mode) (\.x[abdsru]?[cnw]?\' . ld-script-mode) (\.zone\' . dns-mode) (\.soa\' . dns-mode) (\.asd\' . lisp-mode) (\.\(asn\|mib\|smi\)\' . snmp-mode) (\.\(as\|mi\|sm\)2\' . snmpv2-mode) (\.\(diffs?\|patch\|rej\)\' . diff-mode) (\.\(dif\|pat\)\' . diff-mode) (\.[eE]?[pP][sS]\' . ps-mode) (\.\(?:PDF\|DVI\|OD[FGPST]\|DOCX\|XLSX?\|PPTX?\|pdf\|djvu\|dvi\|od[fgpst]\|docx\|xlsx?\|pptx?\)\' . doc-view-mode-maybe) (configure\.\(ac\|in\)\' . autoconf-mode) (\.s\(v\|iv\|ieve\)\' . sieve-mode) (BROWSE\' . ebrowse-tree-mode) (\.ebrowse\' . ebrowse-tree-mode) (#\*mail\* . mail-mode) (\.g\' . antlr-mode) (\.mod\' . m2-mode) (\.ses\' . ses-mode) (\.docbook\' . sgml-mode) (\.com\' . dcl-mode) (/config\.\(?:bat\|log\)\' . fundamental-mode) (/\.\(authinfo\|netrc\)\' . authinfo-mode) (\.\(?:[iI][nN][iI]\|[lL][sS][tT]\|[rR][eE][gG]\|[sS][yY][sS]\)\' . conf-mode) (\.la\' . conf-unix-mode) (\.ppd\' . conf-ppd-mode) (java.+\.conf\' . conf-javaprop-mode) (\.properties\(?:\.[a-zA-Z0-9._-]+\)?\' . conf-javaprop-mode) (\.toml\' . conf-toml-mode) (\.desktop\' . conf-desktop-mode) (/\.redshift\.conf\' . conf-windows-mode) (\`/etc/\(?:DIR_COLORS\|ethers\|.?fstab\|.*hosts\|lesskey\|login\.?de\(?:fs\|vperm\)\|magic\|mtab\|pam\.d/.*\|permissions\(?:\.d/.+\)?\|protocols\|rpc\|services\)\' . conf-space-mode) (\`/etc/\(?:acpid?/.+\|aliases\(?:\.d/.+\)?\|default/.+\|group-?\|hosts\..+\|inittab\|ksysguarddrc\|opera6rc\|passwd-?\|shadow-?\|sysconfig/.+\)\' . conf-mode) ([cC]hange[lL]og[-.][-0-9a-z]+\' . change-log-mode) (/\.?\(?:gitconfig\|gnokiirc\|hgrc\|kde.*rc\|mime\.types\|wgetrc\)\' . conf-mode) (/\.\(?:asound\|enigma\|fetchmail\|gltron\|gtk\|hxplayer\|mairix\|mbsync\|msmtp\|net\|neverball\|nvidia-settings-\|offlineimap\|qt/.+\|realplayer\|reportbug\|rtorrent\.\|screen\|scummvm\|sversion\|sylpheed/.+\|xmp\)rc\' . conf-mode) (/\.\(?:gdbtkinit\|grip\|mpdconf\|notmuch-config\|orbital/.+txt\|rhosts\|tuxracer/options\)\' . conf-mode) (/\.?X\(?:default\|resource\|re\)s\> . conf-xdefaults-mode) (/X11.+app-defaults/\|\.ad\' . conf-xdefaults-mode) (/X11.+locale/.+/Compose\' . conf-colon-mode) (/X11.+locale/compose\.dir\' . conf-javaprop-mode) (\.~?[0-9]+\.[0-9][-.0-9]*~?\' nil t) (\.\(?:orig\|in\|[bB][aA][kK]\)\' nil t) ([/.]c\(?:on\)?f\(?:i?g\)?\(?:\.[a-zA-Z0-9._-]+\)?\' . conf-mode-maybe) (\.[1-9]\' . nroff-mode) (\.art\' . image-mode) (\.avs\' . image-mode) (\.bmp\' . image-mode) (\.cmyk\' . image-mode) (\.cmyka\' . image-mode) (\.crw\' . image-mode) (\.dcr\' . image-mode) (\.dcx\' . image-mode) (\.dng\' . image-mode) (\.dpx\' . image-mode) (\.fax\' . image-mode) (\.hrz\' . image-mode) (\.icb\' . image-mode) (\.icc\' . image-mode) (\.icm\' . image-mode) (\.ico\' . image-mode) (\.icon\' . image-mode) (\.jbg\' . image-mode) (\.jbig\' . image-mode) (\.jng\' . image-mode) (\.jnx\' . image-mode) (\.miff\' . image-mode) (\.mng\' . image-mode) (\.mvg\' . image-mode) (\.otb\' . image-mode) (\.p7\' . image-mode) (\.pcx\' . image-mode) (\.pdb\' . image-mode) (\.pfa\' . image-mode) (\.pfb\' . image-mode) (\.picon\' . image-mode) (\.pict\' . image-mode) (\.rgb\' . image-mode) (\.rgba\' . image-mode) (\.tga\' . image-mode) (\.wbmp\' . image-mode) (\.webp\' . image-mode) (\.wmf\' . image-mode) (\.wpg\' . image-mode) (\.xcf\' . image-mode) (\.xmp\' . image-mode) (\.xwd\' . image-mode) (\.yuv\' . image-mode) (\.tgz\' . tar-mode) (\.tbz2?\' . tar-mode) (\.txz\' . tar-mode) (\.tzst\' . tar-mode))

** org-jira :vars:
#+begin_src emacs-lisp
(setq jiralib-url "https://jira.thinkproject.com")
#+end_src

#+RESULTS:
: https://jira.thinkproject.com

** org-recoll
*** Initialisation :init:vars:

#+begin_src emacs-lisp
(require 'org-recoll)

(setq org-recoll-command-invocation "recollq -t -A"
      org-recoll-results-num 100)
#+end_src

#+RESULTS:
: org-recoll

*** Bindings :kbd:
#+begin_src emacs-lisp
(global-set-key (kbd "C-c g") #'org-recoll-search)
(global-set-key (kbd "C-c u") #'org-recoll-update-index)
#+end_src

#+RESULTS:
: org-recoll-update-index

** org-protocol :init:
#+begin_src emacs-lisp
(require 'org-protocol)
#+end_src

#+RESULTS:
: org-protocol

** org-capture
*** Templates :init:vars:
#+begin_src emacs-lisp
(require 'org-capture)

(setq qzdl/capture-title-timestamp "%(qzdl/utc-timestamp)-${slug}")

(setq org-capture-templates
      `(("i" "inbox" entry (file ,(concat qzdl/org-agenda-directory "inbox.org"))
         "* TODO %?")
        ;; capture link to live `org-roam' thing
        ("I" "current-roam" entry (file ,(concat qzdl/org-agenda-directory "inbox.org"))
         (function qzdl/current-roam-link)
         :immediate-finish t)
        ;; fire directly into inbox
        ("c" "org-protocol-capture" entry (file ,(concat qzdl/org-agenda-directory "inbox.org"))
         "* TODO [[%:link][%:description]]\n\n %i"
         :immediate-finish t)
        ("w" "Weekly Review" entry
         (file+olp+datetree ,(concat qzdl/org-agenda-directory "reviews.org"))
         (file ,(concat qzdl/org-agenda-directory "templates/weekly_review.org")))
        ("r" "Reading" todo ""
         ((org-agenda-files '(,(concat qzdl/org-agenda-directory "reading.org")))))))
#+end_src

#+RESULTS:
| i | inbox                | entry | (file ~/life/gtd/inbox.org) | * TODO %?                |                   |   |
| I | current-roam         | entry | (file ~/life/gtd/inbox.org) | #'qzdl/current-roam-link | :immediate-finish | t |
| c | org-protocol-capture | entry | (file ~/life/gtd/inbox.org) | * TODO [[%:link][%:description]]     |                   |   |


*** Convenience Functions :func:
#+begin_src emacs-lisp
;; helper capture function for `org-roam' for `agenda-mode'
(defun qzdl/current-roam-link ()
  (interactive)
  "Get link to org-roam file with title"
  (concat "* TODO [[" (buffer-file-name) "]["
          (car (org-roam--extract-titles)) "]]"))

(defun qzdl/org-inbox-capture ()
  (interactive)
  "Capture a task in agenda mode."
  (org-capture nil "i"))

(defun qzdl/org-roam-capture-current ()
  (interactive)
  "Capture a task in agenda mode."
  (org-capture nil "I"))

(defun qzdl/org-roam-capture-todo ()
  (interactive)
  "Capture a task in agenda mode."
  (org-roam-capture nil "_"))
#+end_src

#+RESULTS:
: qzdl/org-roam-capture-todo

** org-roam
*** Initialisation :init:vars:
#+begin_src emacs-lisp
(use-package! org-roam
  :commands (org-roam-insert org-roam-find-file org-roam-switch-to-buffer org-roam)
  :hook
  (after-init . org-roam-mode)
  :custom-face
  (org-roam-link ((t (:inherit org-link :foreground "#df85ff"))))
  :init
  (map! :leader
        :prefix "n"
        :desc "org-roam" "l" #'org-roam
        :desc "org-roam-insert" "i" #'org-roam-insert
        :desc "org-roam-switch-to-buffer" "b" #'org-roam-switch-to-buffer
        :desc "org-roam-find-file" "f" #'org-roam-find-file
        :desc "org-roam-insert" "i" #'org-roam-insert
        :desc "qzdl/org-roam-capture-todo" "_" #'qzdl/org-roam-capture-todo
        :desc "qzdl/org-roam-capture-current" "C" #'qzdl/org-roam-capture-current
        :desc "qzdl/org-roam-capture-current" "C-c" #'qzdl/org-roam-capture-current
        :desc "org-roam-capture" "c" #'org-roam-capture)
  (setq org-roam-directory org-roam-directory
        org-roam-db-location (concat org-roam-directory "org-roam.db")
        org-roam-graph-executable "dot"
        org-roam-graph-extra-config '(("overlap" . "false"))
        org-roam-graph-exclude-matcher nil)
  :config
  (require 'org-roam-protocol))

(org-roam-mode +1)
#+end_src

#+RESULTS:
: t

*** Capture templates
#+name: org-roam capture
#+begin_src emacs-lisp
(setq qzdl/org-roam-capture-head
      "#+SETUPFILE:./hugo_setup.org
,#+HUGO_SECTION: zettels
,#+HUGO_SLUG: ${slug}
,#+TITLE: ${title}\n")

(setq org-roam-capture-templates
        `(("d" "default" plain (function org-roam--capture-get-point)
           "%?"
           :file-name ,qzdl/capture-title-timestamp
           :head ,qzdl/org-roam-capture-head
           :unnarrowed t)
          ("_" "pass-though-todo" plain (function org-roam--capture-get-point)
           "%?"
           :file-name ,qzdl/capture-title-timestamp
           :head ,qzdl/org-roam-capture-head
           :immediate-finish t)
          ("p" "private" plain (function org-roam-capture--get-point)
           "%?"
           :file-name ,(concat "private-" qzdl/capture-title-timestamp)
           :head ,qzdl/org-roam-capture-head
           :unnarrowed t)))
#+end_src

#+RESULTS: org-roam capture
| d | default | plain | #'org-roam--capture-get-point | %? | :file-name | %(qzdl/utc-timestamp)-${slug} | :head | #+SETUPFILE:./hugo_setup.org |

#+name: org-roam protocol capture
#+begin_src emacs-lisp
  (setq org-roam-capture-ref-templates
        `(("r" " ref" plain (function org-roam-capture--get-point)
           "%?"
           :file-name ,qzdl/capture-title-timestamp
           :head "#+SETUPFILE:./hugo_setup.org
#+ROAM_KEY: ${ref}
#+HUGO_SLUG: ${slug}
#+TITLE: ${title}
#+SOURCE: ${ref}"
           :unnarrowed t)))
#+end_src

#+RESULTS: org-roam protocol capture
| r | ref | plain | #'org-roam-capture--get-point | %? | :file-name | %(qzdl/utc-timestamp)-${slug} | :head | #+SETUPFILE:./hugo_setup.org |

*** Choose graphviz backend :func:
A nice example of using <link-to-elisp-doc 'completing-read>

mapping a function over a collection is such an easy way to get things done.
#+begin_src emacs-lisp
(setq qzdl/graph-backends '("dot" "neato"))

(defun qzdl/available-graph-backends ()
  (mapcar (lambda (e) (if (equal org-roam-graph-executable e)
                     (concat e " (current)") e))
          qzdl/graph-backends))

(defun qzdl/org-roam-choose-graph-backend ()
  (interactive)
  (setq org-roam-graph-executable
        (completing-read "Choose a graph backend: "
                         (qzdl/available-graph-backends)))
  (message (concat "Graph backend set to " org-roam-graph-executable)))
#+end_src

#+RESULTS:
: qzdl/org-roam-choose-graph-backend

*** TODO Run analysis :func:
Run analysis from source file on org-roam DB
- restrict graph (e.g. exclude sensitive information)

*** org-roam-server :init:vars:
[[https://github.com/org-roam/org-roam-server][GitHub - org-roam/org-roam-server]]
#+begin_src emacs-lisp
(use-package! org-roam-server
:config
(setq org-roam-server-host "127.0.0.1"
      org-roam-server-port 8080
      org-roam-server-export-inline-images t
      org-roam-server-authenticate nil
      org-roam-server-network-label-truncate t
      org-roam-server-network-label-truncate-length 60))
#+end_src

** org-noter
See [[Directories]] for <link-to-elisp-doc 'org-noter-notes-search-path>
#+begin_src emacs-lisp

#+end_src

** org-ref
https://github.com/jkitchin/org-ref
#+begin_src emacs-lisp
(require 'org-ref)
(setq reftex-bib-path  '("~/life/tex.bib")
      reftex-default-bibliography reftex-bib-path
      org-ref-default-bibliography reftex-bib-path)
#+end_src
** org-agenda
#+begin_src emacs-lisp
(use-package! org-agenda
  :init
  (map! "<f1>" #'qzdl/switch-to-agenda)
  (setq org-agenda-block-separator nil
        org-agenda-start-with-log-mode t
        org-agenda-files (list org-roam-directory))
  (defun qzdl/switch-to-agenda ()
    (interactive)
    (org-agenda nil " "))
  :config
  (setq org-columns-default-format
        "%40ITEM(Task) %Effort(EE){:} %CLOCKSUM(Time Spent) %SCHEDULED(Scheduled) %DEADLINE(Deadline)")
  (setq org-agenda-custom-commands
        `((" " "Agenda"
           ((agenda ""
                    ((org-agenda-span 'week)
                     (org-deadline-warning-days 365)))
            (todo "TODO"
                  ((org-agenda-overriding-header "To Refile")
                   (org-agenda-files '(,(concat qzdl/org-agenda-directory "inbox.org")))))
            (todo "TODO"
                  ((org-agenda-overriding-header "Emails")
                   (org-agenda-files '(,(concat qzdl/org-agenda-directory "emails.org")))))
            (todo "NEXT"
                  ((org-agenda-overriding-header "In Progress")
                   (org-agenda-files '(,(concat qzdl/org-agenda-directory "someday.org")
                                       ,(concat qzdl/org-agenda-directory "projects.org")
                                       ,(concat qzdl/org-agenda-directory "next.org")))))
            (todo "TODO"
                  ((org-agenda-overriding-header "Projects")
                   (org-agenda-files '(,(concat qzdl/org-agenda-directory "projects.org")))))
            (todo "TODO"
                  ((org-agenda-overriding-header "One-off Tasks")
                   (org-agenda-files '(,(concat qzdl/org-agenda-directory "next.org")))
                   (org-agenda-skip-function '(org-agenda-skip-entry-if 'deadline 'scheduled)))))))))
#+end_src

#+RESULTS:
: t

** org-journal
#+begin_src emacs-lisp
(use-package org-journal
  :bind
  ("C-c n j" . org-journal-new-entry)
  ("C-c n t" . org-journal-today)
  :custom
  (org-journal-date-prefix "#+TITLE: ")
  (org-journal-file-format "private-%Y-%m-%d.org")
  (org-journal-dir org-roam-directory)
  (org-journal-carryover-items nil)
  (org-journal-enable-agenda-integration nil)
  (org-journal-date-format "%Y-%m-%d")
  :config
  (defun org-journal-today ()
    (interactive)
    (org-journal-new-entry t)))
#+end_src

#+RESULTS:
: org-journal-today

** TODO org-drill
** ox (export)
#+begin_src emacs-lisp
(require 'ox-reveal)
#+end_src

#+RESULTS:
: ox-reveal





* GNUs
Following [[https://www.emacswiki.org/emacs/GnusTutorial][EmacsWiki: Gnus Tutorial]]
#+begin_src emacs-lisp
(setq gnus-secondary-select-methods '((nntp "list.postgres.org")))
#+end_src
