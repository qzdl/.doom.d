#+title: Emacs Configuration

* Globals
** Global Bindings :kbd:
These Key Binds Are focused around ergonomics more than mnemonics
*** Mouse jumping
#ERGO
<link-to-elisp-doc 'better-jumper-jump-backwards>
#+begin_src emacs-lisp
  (map! "<mouse-8>" 'better-jumper-jump-backward)
  (map! "<mouse-9>" 'better-jumper-jump-forward)
#+end_src

#+RESULTS:

*** Switch macro {C-x C-k} and kill-buffer {C-x k}
#+begin_src emacs-lisp
(map! "C-x C-k" #'custom/kill-this-buffer)
(map! "C-x k" #'kmacro-keymap)
#+end_src
*** HJKL Window control
#+begin_src emacs-lisp
(map! "s-h" #'windmove-left)
(map! "s-j" #'windmove-down)
(map! "s-k" #'windmove-up)
(map! "s-l" #'windmove-right)
#+end_src

#+RESULTS:
****
*** Switch delete-blank-lines {C-x C-o} and other-window {C-x o}
#+begin_src emacs-lisp
(map! "C-x C-o" #'ace-window)
(map! "C-x o" #'delete-blank-lines)
#+end_src

#+RESULTS:

*** Buffer control
#+begin_src emacs-lisp
(map! "s-n" #'next-buffer)
(map! "s-p" #'previous-buffer)
#+end_src

#+RESULTS:

*** Switch {C-x} and {C-u}
A tip associated with Dvorak, that is equally charming without the dvorak keyboard layout.
This stellar advice came from [[https://www.emacswiki.org/emacs/DvorakKeyboard][EmacsWiki: Dvorak Keyboard]].
#+begin_src emacs-lisp
(define-key key-translation-map [?\C-x] [?\C-u])
(define-key key-translation-map [?\C-u] [?\C-x])
#+end_src

#+RESULTS:
: [24]

*** Shell pop
#+begin_src emacs-lisp
(map! "C-x C-'" #'+eshell/toggle)

#+end_src

#+RESULTS:

**** TODO Abstract this to a ~user-shell/toggle~ function
incase the shell needs to be changed
*** ROT13 buffer
#+begin_src emacs-lisp
(map! "s-B" 'toggle-rot13-mode)
#+end_src
** Functions :func:
*** UTC Timestamp
#+begin_src emacs-lisp
(defun qzdl/utc-timestamp ()
  (format-time-string "%Y%m%dT%H%M%SZ" (current-time) t))


#+end_src

#+RESULTS:
: qzdl/utc-timestamp
*** toggle between non-nil -> [ 0 | 1 ], [ on | off ]
This function is used for quality of life in ensuring correct bottom values are
used when toggling modes; the set of activation values are not necessarily using
~[t | nil]~, but can be =[(t n>0) | n<=0]=, which can throw a spanner in the
works for a regular style ~(mode (setq toggle (not toggle)))~ type of
arrangement, given ~[t | nil]~.

An example of this can be found in [[Time in the modeline]], or [[Toggle
ERROR_ROLLBACK]]. Equal is used here to coerce non-numeric arguments into
something that will toggle.
#+begin_src emacs-lisp
(defun qzdl/toggle-1->0 (n)
  (if (equal 1 n) 0 1))

(defun qzdl/toggle-on->off (n)
  (if (equal 1 n) "on" "off"))
#+end_src
*** pprint with ~cl-prettyprint~
[[https://stackoverflow.com/questions/3552106/pprint-in-emacs-lisp][elisp - PPRINT in Emacs Lisp? - Stack Overflow]]

#+begin_src emacs-lisp
(defun qz/pprint (form &optional output-stream)
  (princ (with-temp-buffer
           (cl-prettyprint form)
           (buffer-string))
         output-stream))
#+end_src
*** fix [[file:../../../life/roam/20201019T125728Z-bluetooth_headphones.org][bluetooth headphones]]
#+begin_src emacs-lisp
(defun qz/bt-a2dp ()
  (interactive)
  (shell-command "pactl set-card-profile bluez_card.2C_41_A1_87_20_BA a2dp_sink"))
#+end_src

#+RESULTS:
: qz/bt-a2dp

* Doom Tweaks
** ID & Email :vars:
#+begin_src emacs-lisp
(setq user-full-name "Samuel Culpepper"
      user-mail-address "samuel@samuelculpepper.com")
#+end_src
* System Specific
xps:
  base
  (font . 30)
  (display . "eDP-1")
  uw
  (font . 15)
  (display . "HDMI-1")
  (randr . "--scale 2x2")

fuj:
  base
  (font . 15)
  (display . "eDP-1")
  uw
  (font . 15)
  (display . "DP-1")
* Visual
** Fonts & Text :vars:

#+begin_src emacs-lisp
(setq doom-font (font-spec :family "monospace" :size 16))
(setq doom-theme nil)
(setq doom-modeline-height 10)
(setq display-line-numbers-type nil)
(set-language-environment "UTF-8")
(set-default-coding-systems 'utf-8)
#+end_src

#+RESULTS:
: (utf-8-unix . utf-8-unix)

** Tooltips :init:
#+begin_src emacs-lisp
(tooltip-mode 1)
#+end_src
** Time in the modeline :kbd:
An example of this can be found in [[Time in the modeline]]. Equal is used here to
coerce non-numeric arguments into something that will toggle.
#+begin_src emacs-lisp
(setq qzdl/toggle-time-state t)
(display-time-mode qzdl/toggle-time-state)

(defun qzdl/toggle-time-in-modeline ()
  (interactive)
  (message
   (concat "Time display in modeline is "
           (if (display-time-mode
                (setq qzdl/toggle-time-state
                      (qzdl/toggle-1->0 qzdl/toggle-time-state)))
               "on" "off"))))

(map! :leader
      (:prefix-map ("t" . "toggle")
       :desc "Time in the modeline"   "T" #'qzdl/toggle-time-in-modeline))
#+end_src

** [[file:../../../life/roam/20200623T110813Z-elegance_el.org][Elegance]] :init:
#+begin_src emacs-lisp
;(load! "elegance/elegance.el")
;(load! "elegance/sanity.el")
#+end_src
** Writeroom :vars:
When centering, use all available width, and respond to resizing somethinh
12345678901234567890123456789012345678901234567890123456789012345678901234567890
somethingh som
#+begin_src emacs-lisp
(setq writeroom-width 80)

(add-to-list 'writeroom-mode-hook
             (lambda () (setq writeroom-border-width 50)))

#+end_src
** Theme :func:
#+begin_src emacs-lisp
(defun qzdl/load-tron-legacy ()
  (interactive)
  (add-to-list 'custom-theme-load-path "~/.emacs.d/.local/straight/repos/tron-legacy-emacs-theme/")
  (load-theme 'tron-legacy t)
  (setq tron-legacy-vivid-cursor t))

(defun qzdl/load-k ()
  (interactive)
  (load-theme 'k t))

(defun qzdl/load-pink-mountain ()
  (interactive)
  (load-theme 'pink-mountain t))
#+end_src
** [[file:../../../life/roam/20200722T142750Z-ivy_posframe.org][ivy-posframe]] :init:
[[https://github.com/tumashu/ivy-posframe][GitHub - tumashu/ivy-posframe: ivy-posframe is a ivy extension, which let ivy...]]

#+begin_src emacs-lisp :tangle no
(require 'ivy-posframe)
(require 'which-key-posframe)

;; width / height
(setq qz/posframe-min-width (/ 5120 4)
      qz/posframe-min-height (/ 1440 2)
      which-key-posframe-min-width qz/posframe-min-width
      which-key-posframe-min-height qz/posframe-min-height
      ivy-posframe-min-width qz/posframe-min-width
      ivy-posframe-min-height qz/posframe-min-height)

;; draw above x-windows
(add-to-list 'ivy-posframe-parameters '(parent-frame . nil))
(add-to-list 'which-key-posframe-parameters '(parent-frame . nil))

(setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-point)))

;; init
(ivy-posframe-mode 0)
(which-key-posframe-mode 1)
#+end_src

#+RESULTS:
: t

** Transparency :func:
Totally stolen from [[https://www.emacswiki.org/emacs/TransparentEmacs][EmacsWiki: Transparent Emacs]].
#+begin_src emacs-lisp
(setq qzdl/preferred-transparency-alpha '(80 . 70))

(set-frame-parameter (selected-frame) 'alpha qzdl/preferred-transparency-alpha)
(add-to-list 'default-frame-alist `(alpha . ,qzdl/preferred-transparency-alpha))

(defun qzdl/toggle-transparency ()
  "Toggle between max opacity and `qzdl/preferred-transparency-alpha'"
  (interactive)
  (let ((alpha (frame-parameter nil 'alpha)))
    (set-frame-parameter
     nil 'alpha
     (if (eql (cond ((numberp alpha) alpha)
                    ((numberp (cdr alpha)) (cdr alpha))
                    ;; Also handle undocumented (<active> <inactive>) form.
                    ((numberp (cadr alpha)) (cadr alpha)))
              100)
         qzdl/preferred-transparency-alpha '(100 . 100))))
  (message (concat "Frame transparency set to "
                   (number-to-string (car (frame-parameter nil 'alpha))))))
#+end_src

#+RESULTS:
: qzdl/toggle-transparency

** [[file:../../../life/roam/20200613T123425Z-emacs_bgex.org][bgex]] :init:
To create a source image, run ~convert a.png a.xpm~
#+begin_src emacs-lisp :tangle no
(load-file "~/.doom.d/snippets/bgex.el")
(require 'bgex)

;; Image on frame (dynamic color mode (SRC * DST / factor))
;; (bgex-set-image-default "~/.config/wall.xpm" t)
;; Color for HTML-mode (dynamic color mode)
;; (bgex-set-color "HTML" 'bgex-identifier-type-major-mode '(60000 40000 40000) t)

;; ;; Color for buffer-name (*scratch*)
;; (bgex-set-color "*scratch*" 'bgex-identifier-type-buffer-name "skyblue")
;; (bgex-set-color-default "skyblue")
;; ;; XPM string
;; (bgex-set-xpm-string "*scratch*" 'bgex-identifier-type-buffer-name "XPM string" t)
;; (bgex-set-xpm-string-default "XPM strging" t)
#+end_src

#+RESULTS:
: bgex
** [[file:../../../life/roam/20200722T143926Z-perfect_margin.org][perfect-margin]]
#+begin_src emacs-lisp
(perfect-margin-mode 1)
(setq perfect-margin-ignore-regexps nil)
#+end_src
* [[file:../../../life/roam/20200615T124606Z-exwm.org][EXWM]]
** Initialisation :func:init:
#+begin_src emacs-lisp
(require 'exwm-randr)

(defun qzdl/exwm-ultrawide ()
  (interactive)
  (setq exwm-randr-workspace-monitor-plist '(0 "DP-1"))
  (add-hook 'exwm-randr-screen-change-hook
            (lambda ()(start-process-shell-command "xrandr" nil
                                              "xrandr --output DP-1 --mode 5120x1440 --primary --output eDP-1 --off")))
  (exwm-randr-enable))

(defun qzdl/exwm-usbc-ultrawide ()
  (setq exwm-randr-workspace-monitor-plist '(0 "DP-2"))
  (add-hook 'exwm-randr-screen-change-hook
            (lambda ()(start-process-shell-command "xrandr" nil
  "xrandr --output HDMI-2 --off --output HDMI-1 --off --output DP-1 --off --output eDP-1 --off --output DP-2 --primary --mode 5120x1440 --pos 0x0 --rotate normal")))
  (exwm-randr-enable))

(defun qzdl/exwm-tpb ()
  (interactive)
  (setq exwm-randr-workspace-monitor-plist '(0 "eDP-1" 1 "DP-1"))
  (add-hook 'exwm-randr-screen-change-hook
            (lambda ()(start-process-shell-command "xrandr" nil
                                              "xrandr --output HDMI-2 --off --output HDMI-1 --off --output DP-1 --mode 1680x1050 --pos 1920x0 --rotate normal --output eDP-1 --primary --mode 1920x1080 --pos 0x920 --rotate normal --output DP-2 --off")))
  (exwm-randr-enable))


(defun qzdl/exwm-110vga ()
  (interactive)
  (setq exwm-randr-workspace-monitor-plist '(0 "eDP-1" 1 "DP-2"))
  (add-hook 'exwm-randr-screen-change-hook
            (lambda ()(start-process-shell-command "xrandr" nil
                                              "xrandr --output HDMI-2 --off --output HDMI-1 --off --output DP-1 --off --output eDP-1 --primary --mode 1920x1080 --pos 0x352 --rotate normal --output DP-2 --mode 1920x1080 --pos 1920x0 --rotate normal")))
  (exwm-randr-enable))

(qzdl/exwm-usbc-ultrawide)
;;(qzdl/exwm-tpb)
(exwm-enable)
#+end_src

#+RESULTS:

** Startup Programs :init:
#+begin_src emacs-lisp
(setq qzdl/startup-programs
      '("compton"
        "unclutter"))

(defun qzdl/run-programs-n-process (p)
  (mapcar (lambda (c) (start-process-shell-command c nil c)) p))

(defun qzdl/seq-to-kill (p)
  (mapcar (lambda (s) (concat "killall " s)) p))

(defun qzdl/run-startup-programs ()
  (interactive)
  (qzdl/run-programs-n-process
   (qzdl/seq-to-kill qzdl/startup-programs))
  (qzdl/run-programs-n-process qzdl/startup-programs))

(qzdl/run-startup-programs)
#+end_src

#+RESULTS:
| compton | unclutter |

** Workspaces & Classes :vars:
#+begin_src emacs-lisp
(require 'exwm)

;; Set the initial workspace number.
(unless (get 'exwm-workspace-number 'saved-value)
  (setq exwm-workspace-number 4))

;; Make class name the buffer name
(add-hook 'exwm-update-class-hook
          (lambda () (exwm-workspace-rename-buffer exwm-class-name)))

;; ensure doom recognises x-windows as 'real' per <link-to-elisp-doc
;; 'doom-real-buffer-p>
(add-hook 'exwm-mode-hook #'doom-mark-buffer-as-real-h)

(defun qz/mark-this-buffer-as-real ()
  (interactive)
  (doom-mark-buffer-as-real-h))

#+end_src

#+RESULTS:
| lambda | nil | (exwm-workspace-rename-buffer exwm-class-name) |

** Bindings :kbd:
*** Global :kbd:
#+begin_src emacs-lisp
(defun qz/read-process-shell-command (command)
  "Used to launch a program by creating a process. Invokes
`start-process-shell-command' with COMMAND"
  (interactive (list (read-shell-command "λ ")))
  (start-process-shell-command command nil command))

(setq exwm-input-global-keys
      `(([?\s-r] . exwm-reset)                     ;; `s-r': Reset (to line-mode).
        ([?\s-w] . exwm-workspace-switch)          ;; `s-w': Switch workspace.
        ([?\s-&] . qz/read-process-shell-command)  ;; `s-&': Launch program
        ,@(mapcar (lambda (i)                           ;; `s-N': Switch to certain workspace.
                    `(,(kbd (format "s-%d" i)) .   ;; expands to n binds ([s-N] . λ exwm-wsc N)
                      (lambda ()
                        (interactive)
                        (exwm-workspace-switch-create ,i))))
                  (number-sequence 0 9))))



(qz/pprint exwm-input-global-keys)
#+end_src

#+RESULTS:
#+begin_example

(([8388722] . exwm-reset)
 ([8388727] . exwm-workspace-switch)
 ([8388646] . qz/read-process-shell-command)
 ([8388656] lambda nil (interactive) (exwm-workspace-switch-create 0))
 ([8388657] lambda nil (interactive) (exwm-workspace-switch-create 1))
 ([8388658] lambda nil (interactive) (exwm-workspace-switch-create 2))
 ([8388659] lambda nil (interactive) (exwm-workspace-switch-create 3))
 ([8388660] lambda nil (interactive) (exwm-workspace-switch-create 4))
 ([8388661] lambda nil (interactive) (exwm-workspace-switch-create 5))
 ([8388662] lambda nil (interactive) (exwm-workspace-switch-create 6))
 ([8388663] lambda nil (interactive) (exwm-workspace-switch-create 7))
 ([8388664] lambda nil (interactive) (exwm-workspace-switch-create 8))
 ([8388665] lambda nil (interactive) (exwm-workspace-switch-create 9)))
#+end_example

*** Line Editing :kbd:

#+begin_src emacs-lisp
(setq exwm-input-simulation-keys
      '(([?\C-b] . [left])
        ([?\C-f] . [right])
        ([?\C-p] . [up])
        ([?\C-n] . [down])
        ([?\C-a] . [home])
        ([?\C-e] . [end])
        ([?\M-v] . [prior])
        ([?\C-v] . [next])
        ([?\C-d] . [delete])
        ([?\M-d] . [C-delete])
        ([?\M-b] . [C-left])
        ([?\M-f] . [C-right])
        ([?\C-k] . [S-end delete])
        ;; cut/paste.
        ([?\C-w] . [?\C-x])
        ([?\M-w] . [?\C-c])
        ([?\C-y] . [?\C-v])
        ;; search
        ([?\C-s] . [?\C-f])))
#+end_src

#+RESULTS:
: (([2] . [left]) ([6] . [right]) ([16] . [up]) ([14] . [down]) ([1] . [home]) ([5] . [end]) ([134217846] . [prior]) ([22] . [next]) ([4] . [delete]) ([134217828] . [C-delete]) ([134217826] . [C-left]) ([134217830] . [C-right]) ([11] . [S-end delete]) ([23] . [24]) ([134217847] . [3]) ([25] . [22]) ([19] . [6]))

** Wallpaper :init:
<link-to-elisp-doc 'wallpaper-cycle-interval> is measured in seconds, 900 being 15 minutes
#+begin_src emacs-lisp
(setq wallpaper-cycle-interval 900)

(use-package! wallpaper
  :hook ((exwm-randr-screen-change . wallpaper-set-wallpaper)
         (after-init . wallpaper-cycle-mode))
  :custom ((wallpaper-cycle-interval 900)
           (wallpaper-cycle-single t)
           (wallpaper-scaling 'fill)
           (wallpaper-cycle-directory "~/.config/wallpapers")))
#+end_src

#+RESULTS:
| org-roam-mode | hproperty:set-face-after-init | wallpaper-cycle-mode | (closure (t) (&rest _) (progn (if (featurep 'sly) (sly-setup) (eval-after-load 'sly #'(lambda nil (sly-setup)))))) | doom-modeline-mode | doom-init-fonts-h | doom-init-leader-keys-h | x-wm-set-size-hint | tramp-register-archive-file-name-handler | magit-auto-revert-mode--init-kludge | magit-startup-asserts | magit-version | hyperb:init | table--make-cell-map |

* Emacs Server :init:
#+begin_src emacs-lisp
(server-start)
#+end_src

#+RESULTS:

* Hydra
** n :kbd:
The =n= of {C-c n} denotes notes.

#+begin_src emacs-lisp
(map! :leader
      (:prefix-map ("n" . "notes")
       (:prefix-map ("d" . "by date")
          :desc "Arbitrary date" "d" #'org-roam-dailies-date
          :desc "Today"          "t" #'org-roam-dailies-today
          :desc "Tomorrow"       "m" #'org-roam-dailies-tomorrow
          :desc "Yesterday"      "y" #'org-roam-dailies-yesterday)
       "f" #'org-roam-find-file
       "F" #'find-file-in-notes))
#+end_src

#+RESULTS:

* [[file:../../../life/roam/20200412130848-programming.org][Programming]]
** [[file:../../../life/roam/20200623T110142Z-sql.org][SQL]]
For reference: [[https://www.emacswiki.org/emacs/SqlMode][EmacsWiki: Sql Mode]]
*** Toggle ERROR_ROLLBACK :psql:func:
#+begin_src emacs-lisp
(setq qzdl/psql-error-rollback 0)

(qzdl/toggle-1->0 qzdl/psql-error-rollback)

(defun qzdl/psql-toggle-error-rollback ()
  (interactive)
  (setq qzdl/psql-error-rollback
        (qzdl/toggle-1->0 qzdl/psql-error-rollback))
  (sql-send-string
   (concat "\\set ON_ERROR_ROLLBACK "
           (qzdl/toggle-on->off qzdl/psql-error-rollback)))
  (sql-send-string
   "\\echo ON_ERROR_ROLLBACK is :ON_ERROR_ROLLBACK"))
#+end_src

#+RESULTS:
: qzdl/psql-toggle-error-rollback

*** Upcase SQL Keywords :func:
Lifted from [[https://www.emacswiki.org/emacs/SqlMode#toc4][EmacsWiki: Sql Mode]] (#toc4)
#+begin_src emacs-lisp
  (defun qzdl/upcase-sql-keywords ()
    (interactive)
    (save-excursion
      (dolist (keywords sql-mode-postgres-font-lock-keywords)
        (goto-char (point-min))
        (while (re-search-forward (car keywords) nil t)
          (goto-char (+ 1 (match-beginning 0)))
          (when (eql font-lock-keyword-face (face-at-point))
            (backward-char)
            (upcase-word 1)
            (forward-char))))))
#+end_src

** [[file:../../../life/roam/20200402172258-common_lisp.org][Common Lisp]]
*** cl-font-lock-built-in-mode :vars:
"Highlight built-in functions, variables, and types in ‘lisp-mode’."
- Enable feature from 28.1 if exists
  <link-to-elisp-doc 'cl-font-lock-built-in-mode>
#+begin_src emacs-lisp
(if (symbolp 'cl-font-lock-built-in-mode)
    (cl-font-lock-built-in-mode 1))
#+end_src
***
*** sly eval-overlay :func:

Using the handy [[https://github.com/xiongtx/eros][eros]], advice from [[https://www.reddit.com/r/emacs/comments/bi4xk1/evaluation_overlays_in_slime_for_common_lisp/][Evaluation overlays in slime for common lisp : emacs]]
#+begin_src emacs-lisp
(autoload 'cider--make-result-overlay "cider-overlays")


(defun endless/eval-overlay (value point)
  (cider--make-result-overlay (format "%S" value)
    :where point
    :duration 'command)
  ;; Preserve the return value.
  value)


;; (define-key! 'sly-mode-map "C-x C-e" 'sly-eval-last-expression)
#+end_src

#+RESULTS:
: endless/eval-overlay

** [[file:../../../life/roam/20200415T145703Z-emacs_lisp.org][Emacs Lisp]]
*** eval-defun :kbd:
#+begin_src emacs-lisp
(define-key! emacs-lisp-mode-map "C-c C-c" 'eval-defun)
#+end_src
*** ingredients
Some code wrapping [[file:../../../life/roam/20201014T121143Z-schollz_ingredients_extract_recipe_ingredients_from_any_recipe_website_on_the_internet.org][schollz/ingredients]], outputting some [[file:../../../life/roam/20200515T120103Z-org_mode.org][org-mode]] heading & body
#+begin_src emacs-lisp
(defun qz/read-property-mod-buffer ()
 (interactive)
 (let* ((command (completing-read "command: " qz/buffer-mod-commands))
       (args (+org--get-property (completing-read "property: " qz/buffer-mod-props))))
   (setq current-prefix-arg '(4))
   (shell-command (concat command " " args " &"))))

(defun qz/get-ingredients-mod-buffer ()
  (interactive)
  (let* ((c (current-buffer))
         (pt (point))
         (json-object-type 'hash-table)
         (json-array-type 'list)
         (json-key-type 'string)
         (jsono (json-read-from-string
                 (shell-command-to-string
                  (concat "~/.local/bin/ingredients " (+org--get-property "roam_key")))))
         (ingreds (gethash "ingredients" jsono)))
    (insert "* Ingredients\n")
    (insert
     (apply
      'concat
      (mapcar (lambda (e)
                (concat "- " (gethash "line" e)
                        " [" (number-to-string (gethash "cups" (gethash "measure" e)))
                        " cups]\n")) ingreds)))))
#+end_src

#+RESULTS:
: qz/get-ingredients-mod-buffer

**  eshell
also, see [[~/.eshellrc][~/.eshellrc]]
*** sudo
#+begin_src emacs-lisp
(require 'em-tramp)
(setq eshell-prefer-lisp-functions t
      eshell-prefer-lisp-variables t
      password-cache t
      password-cache-expiry 300) 

#+end_src

#+RESULTS:
: 300

* [[file:../../../life/roam/20200511T193645Z-gnu_hyperbole.org][Hyperbole]]
** Initialisation :init:
#+begin_src emacs-lisp
(require 'hyperbole)
#+end_src

#+RESULTS:
: hyperbole

** Action-Key with mouse buttons :kbd:
#+begin_src emacs-lisp
(map! "C-<mouse-2>" #'hkey-either)
#+end_src

#+RESULTS:

* PDF
** Dark-Mode on entry :vars:
This function takes colours from the current [[Theme]], and applies a colour-mask to
the view of the pdf as it's rendered by PDFTools.
#+begin_src emacs-lisp
(add-hook 'pdf-view-mode-hook #'pdf-view-midnight-minor-mode)
#+end_src

#+RESULTS:
| doom-modeline-set-pdf-modeline | pdf-view-midnight-minor-mode |

* [[file:../../../life/roam/20200722T143145Z-keyfreq.org][KeyFreq]] :init:
A package that logs command usage; blessed be Xah Lee
#+begin_src emacs-lisp
(keyfreq-mode 1)
(keyfreq-autosave-mode 1)
#+end_src

#+RESULTS:
: t

* Org
** Tweaks :vars:
*** File apps
Handle opening with { C-c C-o } or { RET } or { mouse-1 }
- <link-to-elisp-doc 'org-file-apps>

#+begin_src emacs-lisp
(setq org-file-apps
      '((auto-mode . emacs)
        (directory . emacs)
        ("\\.mm\\'" . default)
        ("\\.x?html?\\'" . default)
        ("\\.pdf\\'" . emacs)))
#+end_src

#+RESULTS:
: ((auto-mode . emacs) (directory . emacs) (\.mm\' . default) (\.x?html?\' . default) (\.pdf\' . emacs))

*** Cleanup ~org-mode-hook~
#+begin_src emacs-lisp
(eval-after-load nil
  (remove-hook 'org-mode-hook #'ob-ipython-auto-configure-kernels))
#+end_src

#+RESULTS:

** Directories :vars:
#+begin_src emacs-lisp
(setq org-directory "~/life/"
      qzdl/notes-directory (concat org-directory "roam/")
      qzdl/org-agenda-directory (concat org-directory "gtd/")
      org-ref-notes-directory qzdl/notes-directory
      bibtex-completion-notes-path qzdl/notes-directory
      org-ref-bibliography-notes "~/life/bib.org"
      org-noter-notes-search-path (list qzdl/notes-directory)
      org-roam-directory qzdl/notes-directory)

#+end_src

#+RESULTS:
: ~/life/roam/

** Refile :vars:
#+begin_src emacs-lisp
(setq org-refile-targets '(("next.org" :level . 0)
                           ("someday.org" :level . 0)
                           ("reading.org" :level . 1)
                           ("projects.org" :maxlevel . 1)))
#+end_src

#+RESULTS:
: ((next.org :level . 0) (someday.org :level . 0) (reading.org :level . 1) (projects.org :maxlevel . 1))

** [[file:../../../life/roam/20200515T120103Z-org_mode.org][org-mode]] :init:vars:
#+begin_src emacs-lisp
(use-package! org
  :mode ("\\.org\\'" . org-mode)
  :init
  (map! :leader
        :prefix "n"
        "c" #'org-capture)
  (map! :map org-mode-map
        "M-n" #'outline-next-visible-heading
        "M-p" #'outline-previous-visible-heading)
  (setq org-src-window-setup 'current-window
        org-return-follows-link t
        org-babel-load-languages '((emacs-lisp . t)
                                   ;; (common-lisp . t)
                                   (python . t)
                                   (ipython . t)
                                   (dot . t)
                                   (R . t))
        org-ellipses " ..."
        org-confirm-babel-evaluate nil
        org-use-speed-commands t
        org-catch-invisible-edits 'show
        org-preview-latex-image-directory "/tmp/ltximg/"
        ;; ORG SRC BLOCKS `C-c C-,'
        org-structure-template-alist '(("a" . "export ascii")
                                       ("c" . "center")
                                       ("C" . "comment")
                                       ("e" . "example")
                                       ("E" . "export")
                                       ("h" . "export html")
                                       ("l" . "export latex")
                                       ("q" . "quote")
                                       ("s" . "src")
                                       ("v" . "verse")
                                       ("el" . "src emacs-lisp")
                                       ("d" . "definition")
                                       ("t" . "theorem")))
  (with-eval-after-load 'flycheck
    (flycheck-add-mode 'proselint 'org-mode)))

#+end_src

** org-jira :vars:
#+begin_src emacs-lisp
(setq jiralib-url "https://jira.thinkproject.com")
#+end_src

#+RESULTS:
: https://jira.thinkproject.com

** [[file:../../../life/roam/20200701T083326Z-org_recoll.org][org-recoll]]
*** Initialisation :init:vars:

#+begin_src emacs-lisp
(require 'org-recoll)

(setq org-recoll-command-invocation "recollq -t -A"
      org-recoll-results-num 100)
#+end_src

#+RESULTS:
: org-recoll

*** Bindings :kbd:
#+begin_src emacs-lisp
(map! "C-c g" #'org-recoll-search)
(map! "C-c u" #'org-recoll-update-index)
(map! :mode org-recoll-mode "q" #'kill-this-buffer)
#+end_src

#+RESULTS:

** org-protocol :init:
#+begin_src emacs-lisp
(require 'org-protocol)
#+end_src

#+RESULTS:
: org-protocol

** org-capture
*** Templates :init:vars:
#+begin_src emacs-lisp
(require 'org-capture)

(setq qzdl/capture-title-timestamp "%(qzdl/utc-timestamp)-${slug}")

(setq org-capture-templates
      `(("i" "inbox" entry (file ,(concat qzdl/org-agenda-directory "inbox.org"))
         "* TODO %?")
        ;; capture link to live `org-roam' thing
        ("I" "current-roam" entry (file ,(concat qzdl/org-agenda-directory "inbox.org"))
         (function qzdl/current-roam-link)
         :immediate-finish t)
        ;; fire directly into inbox
        ("c" "org-protocol-capture" entry (file ,(concat qzdl/org-agenda-directory "inbox.org"))
         "* TODO [[%:link][%:description]]\n\n %i"
         :immediate-finish t)
        ("w" "Weekly Review" entry
         (file+olp+datetree ,(concat qzdl/org-agenda-directory "reviews.org"))
         (file ,(concat qzdl/org-agenda-directory "templates/weekly_review.org")))
        ("r" "Reading" todo ""
         ((org-agenda-files '(,(concat qzdl/org-agenda-directory "reading.org")))))))
#+end_src

#+RESULTS:
| i | inbox                | entry | (file ~/life/gtd/inbox.org) | * TODO %?                |                   |   |
| I | current-roam         | entry | (file ~/life/gtd/inbox.org) | #'qzdl/current-roam-link | :immediate-finish | t |
| c | org-protocol-capture | entry | (file ~/life/gtd/inbox.org) | * TODO [[%:link][%:description]]     |                   |   |


*** Convenience Functions :func:
#+begin_src emacs-lisp
;; helper capture function for `org-roam' for `agenda-mode'
(defun qzdl/current-roam-link ()
  (interactive)
  "Get link to org-roam file with title"
  (concat "* TODO [[" (buffer-file-name) "]["
          (car (org-roam--extract-titles)) "]]"))

(defun qzdl/org-inbox-capture ()
  (interactive)
  "Capture a task in agenda mode."
  (org-capture nil "i"))

(defun qzdl/org-roam-capture-current ()
  (interactive)
  "Capture a task in agenda mode."
  (org-capture nil "I"))

(defun qzdl/org-roam-capture-todo ()
  (interactive)
  "Capture a task in agenda mode."
  (org-roam-capture nil "_"))
#+end_src

#+RESULTS:
: qzdl/org-roam-capture-todo

** [[file:../../../life/roam/20200401202402-org_roam.org][org-roam]]
*** Initialisation :init:vars:
#+begin_src emacs-lisp
(use-package! org-roam
  :commands (org-roam-insert org-roam-find-file org-roam-switch-to-buffer org-roam)
  :hook
  (after-init . org-roam-mode)
  :custom-face
  (org-roam-link ((t (:inherit org-link :foreground "#df85ff"))))
  :init
  (map! :leader
        :prefix "n"
        :desc "org-roam" "l" #'org-roam
        :desc "org-roam-insert" "i" #'org-roam-insert
        :desc "org-roam-switch-to-buffer" "b" #'org-roam-switch-to-buffer
        :desc "org-roam-find-file" "f" #'org-roam-find-file
        :desc "org-roam-insert" "i" #'org-roam-insert
        :desc "qzdl/org-roam-capture-todo" "_" #'qzdl/org-roam-capture-todo
        :desc "qzdl/org-roam-capture-current" "C" #'qzdl/org-roam-capture-current
        :desc "qzdl/org-roam-capture-current" "C-c" #'qzdl/org-roam-capture-current
        :desc "org-roam-capture" "c" #'org-roam-capture)
  (setq org-roam-directory org-roam-directory
        org-roam-db-location (concat org-roam-directory "org-roam.db")
        org-roam-graph-executable "dot"
        org-roam-graph-extra-config '(("overlap" . "false"))
        org-roam-graph-exclude-matcher nil)
  :config
  (require 'org-roam-protocol))

(org-roam-mode +1)
#+end_src

#+RESULTS:
: t

*** Capture templates
#+name: org-roam capture
#+begin_src emacs-lisp
(setq qzdl/org-roam-capture-head
      "#+setupfile:./hugo_setup.org
,#+hugo_section: zettels
,#+hugo_slug: ${slug}
,#+title: ${title}\n")

(setq org-roam-capture-templates
        `(("d" "default" plain (function org-roam--capture-get-point)
           "%?"
           :file-name ,qzdl/capture-title-timestamp
           :head ,qzdl/org-roam-capture-head
           :unnarrowed t)
          ("_" "pass-though-todo" plain (function org-roam--capture-get-point)
           "%?"
           :file-name ,qzdl/capture-title-timestamp
           :head ,qzdl/org-roam-capture-head
           :immediate-finish t)
          ("p" "private" plain (function org-roam-capture--get-point)
           "%?"
           :file-name ,(concat "private-" qzdl/capture-title-timestamp)
           :head ,qzdl/org-roam-capture-head
           :unnarrowed t)))
#+end_src

#+RESULTS: org-roam capture
| d | default | plain | #'org-roam--capture-get-point | %? | :file-name | %(qzdl/utc-timestamp)-${slug} | :head | #+SETUPFILE:./hugo_setup.org |

#+name: org-roam protocol capture
#+begin_src emacs-lisp
  (setq org-roam-capture-ref-templates
        `(("r" " ref" plain (function org-roam-capture--get-point)
           "%?"
           :file-name ,qzdl/capture-title-timestamp
           :head "#+setupfile:./hugo_setup.org
#+roam_key: ${ref}
#+hugo_slug: ${slug}
#+title: ${title}
#+source: ${ref}"
           :unnarrowed t)))
#+end_src

#+RESULTS: org-roam protocol capture
| r | ref | plain | #'org-roam-capture--get-point | %? | :file-name | %(qzdl/utc-timestamp)-${slug} | :head | #+SETUPFILE:./hugo_setup.org |

*** Choose graphviz backend :func:
A nice example of using <link-to-elisp-doc 'completing-read>

mapping a function over a collection is such an easy way to get things done.
#+begin_src emacs-lisp
(setq qzdl/graph-backends '("dot" "neato"))

(defun qzdl/available-graph-backends ()
  (mapcar (lambda (e) (if (equal org-roam-graph-executable e)
                     (concat e " (current)") e))
          qzdl/graph-backends))

(defun qzdl/org-roam-choose-graph-backend ()
  (interactive)
  (setq org-roam-graph-executable
        (completing-read "Choose a graph backend: "
                         (qzdl/available-graph-backends)))
  (message (concat "Graph backend set to " org-roam-graph-executable)))
#+end_src

#+RESULTS:
: qzdl/org-roam-choose-graph-backend

*** TODO Run analysis :func:
Run analysis from source file on org-roam DB
- restrict graph (e.g. exclude sensitive information)

*** org-roam-server :init:vars:
[[https://github.com/org-roam/org-roam-server][GitHub - org-roam/org-roam-server]]
#+begin_src emacs-lisp
(use-package! org-roam-server
:config
(setq org-roam-server-host "127.0.0.1"
      org-roam-server-port 8080
      org-roam-server-export-inline-images t
      org-roam-server-authenticate nil
      org-roam-server-network-label-truncate t
      org-roam-server-network-label-truncate-length 60))
#+end_src

** org-noter
See [[Directories]] for <link-to-elisp-doc 'org-noter-notes-search-path>
#+begin_src emacs-lisp

#+end_src

** org-ref
https://github.com/jkitchin/org-ref
#+begin_src emacs-lisp
(require 'org-ref)
(setq reftex-bib-path  '("~/life/tex.bib")
      reftex-default-bibliography reftex-bib-path
      org-ref-default-bibliography reftex-bib-path)
#+end_src
** [[file:../../../life/roam/20200612T111528Z-org_agenda.org][org-agenda]]
#+begin_src emacs-lisp
(use-package! org-agenda
  :init
  (map! "<f1>" #'qzdl/switch-to-agenda)
  (setq org-agenda-block-separator nil
        org-agenda-start-with-log-mode t
        org-agenda-files (list qzdl/org-agenda-directory))
  (defun qzdl/switch-to-agenda ()
    (interactive)
    (org-agenda nil "g"))
  :config
  (setq org-columns-default-format
        "%40ITEM(Task) %Effort(EE){:} %CLOCKSUM(Time Spent) %SCHEDULED(Scheduled) %DEADLINE(Deadline)")
  (setq org-agenda-custom-commands
        `(("g" "GTD"
           ((agenda ""
                    ((org-agenda-span 'week)
                     (org-deadline-warning-days 365)))
            (todo "TODO"
                  ((org-agenda-overriding-header "To Refile")
                   (org-agenda-files '(,(concat qzdl/org-agenda-directory "inbox.org")))))
            (todo "TODO"
                  ((org-agenda-overriding-header "Emails")
                   (org-agenda-files '(,(concat qzdl/org-agenda-directory "emails.org")))))
            (todo "NEXT"
                  ((org-agenda-overriding-header "In Progress")
                   (org-agenda-files '(,(concat qzdl/org-agenda-directory "someday.org")
                                       ,(concat qzdl/org-agenda-directory "projects.org")
                                       ,(concat qzdl/org-agenda-directory "next.org")))))
            (todo "TODO"
                  ((org-agenda-overriding-header "Projects")
                   (org-agenda-files '(,(concat qzdl/org-agenda-directory "projects.org")))))
            (todo "TODO"
                  ((org-agenda-overriding-header "One-off Tasks")
                   (org-agenda-files '(,(concat qzdl/org-agenda-directory "next.org")))
                   (org-agenda-skip-function '(org-agenda-skip-entry-if 'deadline 'scheduled))))))
          ("h" "habit + tag search"
           ((agenda ""))          
           ((org-agenda-show-log t)
            (org-agenda-ndays 7)
            (org-agenda-log-mode-items '(state))))
          ("hh" tags "+habit")
          ("hd" tags "+habit+daily")
          ("hw" tags "+habit+weekly"))))

(defun qz/rg-get-files-with-tags ()
  "Returns a LIST of files that contain TAGS (currently, just `TODO')"
  (split-string
   (shell-command-to-string "rg TODO ~/life/roam/ -c | awk -F '[,:]' '{print $1}'")))

(setq org-agenda-files
      (append org-agenda-files (qz/rg-get-files-with-tags)))
#+end_src

#+RESULTS:
: t

** [[file:../../../life/roam/20200602T101201Z-org_journal.org][org-journal]]
#+begin_src emacs-lisp
(use-package org-journal
  :bind
  ("C-c n j" . org-journal-new-entry)
  ("C-c n t" . org-journal-today)
  :custom
  (org-journal-date-prefix "#+title: ")
  (org-journal)
  (org-journal-file-format "private-%Y-%m-%d.org")
  (org-journal-dir org-roam-directory)
  (org-journal-carryover-items nil)
  (org-journal-enable-agenda-integration nil)
  (org-journal-date-format "<%Y-%m-%d>")
  :config
  (defun org-journal-today ()
    (interactive)
    (org-journal-new-entry t)))
#+end_src

#+RESULTS:
: org-journal-today

** TODO [[file:../../../life/roam/20200722T143300Z-org_drill.org][org-drill]]
** ox (export)
#+begin_src emacs-lisp
(require 'ox-reveal)
#+end_src

#+RESULTS:
: ox-reveal

* GNUs
Following [[https://www.emacswiki.org/emacs/GnusTutorial][EmacsWiki: Gnus Tutorial]]
#+begin_src emacs-lisp
(setq gnus-secondary-select-methods '((nntp "list.postgres.org")))
#+end_src
* Completion
** orderless
ideally the ordering should account ~match, last-used, degree~
TODO find out about company component delimiters for inputting soaces and stuff
#+begin_src emacs-lisp
(require 'orderless)
(setq completion-styles '(orderless))
(icomplete-mode) ; optional but recommended!

(setq orderless-component-separator "[ &]")
(setq company-idle-delay 0.1
      company-minimum-prefix-length 1)

; highlight matching parts
(defun just-one-face (fn &rest args)
  (let ((orderless-match-faces [completions-common-part]))
    (apply fn args)))

(advice-add 'company-capf--candidates :around #'just-one-face)
#+end_src

#+RESULTS:
: t
