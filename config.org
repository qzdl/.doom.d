#+title: Emacs Configuration
#+filetags: emacs

* Globals
** Vars :vars:
*** doom id
#+begin_src emacs-lisp
(setq user-full-name "Samuel Culpepper"
      user-mail-address "samuel@samuelculpepper.com")
#+end_src

#+RESULTS:
: samuel@samuelculpepper.com
*** hostname specific
#+begin_src emacs-lisp
(cond
  ((string-equal system-name "qzdl") (setq qz/font-default 32))
  (t (setq qz/font-default 16)))
#+end_src
*** epg propgram
#+begin_src emacs-lisp
(setq epg-gpg-program "gpg")
#+end_src

#+RESULTS:
: gpg

#+RESULTS:
: 16
*** authinfo
#+begin_src emacs-lisp
(load-file "~/.doom.d/private/authinfo.el")

#+end_src

#+RESULTS:
: /home/qzdl/dotfiles/emacs/.doom.d/private/

** Global Bindings :kbd:
These Key Binds Are focused around ergonomics more than mnemonics
*** Mouse jumping
#ERGO
<link-to-elisp-doc 'better-jumper-jump-backwards>
#+begin_src emacs-lisp
  (map! "<mouse-8>" 'better-jumper-jump-backward)
  (map! "<mouse-9>" 'better-jumper-jump-forward)
#+end_src

#+RESULTS:
*** unset {C-z} to eqiv of vim's {O} -> also stop EXWM from hanging
this bind is a DOOM emacs function, lilke )
#+begin_src emacs-lisp
(map! "C-z" #'+default/newline-above)
#+end_src

#+RESULTS:

*** redo {C-?}
#+begin_src emacs-lisp
(map! "C-?" #'undo-redo)
#+end_src

#+RESULTS:

*** Switch macro {C-x C-k} and kill-buffer {C-x k}
#+begin_src emacs-lisp
(map! "C-x C-k" #'kill-this-buffer)
(map! "C-x k" #'kmacro-keymap)
#+end_src

#+RESULTS:

*** HJKL Window control
#+begin_src emacs-lisp
(map! "s-h" #'windmove-left)
(map! "s-j" #'windmove-down)
(map! "s-k" #'windmove-up)
(map! "s-l" #'windmove-right)
#+end_src

#+RESULTS:
*** Switch delete-blank-lines {C-x C-o} and other-window {C-x o}
#+begin_src emacs-lisp
(map! "C-x C-o" #'ace-window)
(map! "C-x o" #'delete-blank-lines)
#+end_src

#+RESULTS:

*** Buffer control
#+begin_src emacs-lisp
(map! "s-n" #'next-buffer)
(map! "s-p" #'previous-buffer)
#+end_src

#+RESULTS:

*** Switch {C-x} and {C-u}
A tip associated with Dvorak, that is equally charming without the dvorak
keyboard layout. This stellar advice came from [[https://www.emacswiki.org/emacs/DvorakKeyboard][EmacsWiki: Dvorak Keyboard]].
#+begin_src emacs-lisp
(define-key key-translation-map [?\C-x] [?\C-u])
(define-key key-translation-map [?\C-u] [?\C-x])
#+end_src

#+RESULTS:
: [24]

*** Shell pop
#+begin_src emacs-lisp
(map! "C-x C-'" #'+eshell/toggle)
#+end_src

#+RESULTS:

**** TODO Abstract this to a ~user-shell/toggle~ function
incase the shell needs to be changed
*** ROT13 buffer
#+begin_src emacs-lisp
(map! "s-B" 'toggle-rot13-mode)
#+end_src

#+RESULTS:
*** roam insert on {s-i}
can just be easier this way
#+begin_src emacs-lisp
(map! "s-i" #'qz/roam-insert)
#+end_src

#+RESULTS:

*** TODO bookmarks
** Functions :func:
*** UTC Timestamp
#+begin_src emacs-lisp
(defun qz/utc-timestamp ()
  (format-time-string "%Y%m%dT%H%M%SZ" (current-time) t))
#+end_src

#+RESULTS:
: qz/utc-timestamp

*** custom popup qz/buffer-popup
#+begin_src emacs-lisp
(defvar qz/buffer-popup-minor-mode-map
  (let ((kmap (make-sparse-keymap)))
    (set-keymap-parent kmap text-mode-map)
    (define-key kmap (kbd "C-c C-c") #'qz/buffer-popup-commit)
    (define-key kmap (kbd "C-c C-k") #'qz/buffer-popup-abort)
    kmap))

(defcustom qz/buffer-popup-window-config
  '(+popup-display-buffer-stacked-side-window-fn)
  ;;  '((display-buffer-reuse-window display-buffer-split-below-and-attach)    (inhibit-same-window . t) (window-height . 0.25))
  "adjust the behaiour of the popup window

totally stolen from <link-to-elisp-doc 'pdf-annot-edit-contents-display-buffer-action>'")

(define-minor-mode qz/buffer-popup-minor-mode
  "Active when editing the contents of qz/buffer-popup."
  nil nil nil
  (when qz/buffer-popup-minor-mode
    (message "%s"
             (substitute-command-keys
              "Press \\[qz/buffer-popup-commit] to commit your changes, \\[qz/buffer-popup-abort] to abandon them."))))

(put 'qz/buffer-popup-minor-mode 'permanent-local t)



;; FIXME make this better for general shit
(defun qz/buffer-popup-finalize (save? &optional kill backfill)
  (setq qz/buffer-popup-last-value
        (cond
         ((and kill backfill) backfill)
         (t (with-current-buffer qz/buffer-popup-current-or-last
              (buffer-substring-no-properties (point-min) (point-max))))))
  (dolist (win (get-buffer-window-list))
    (quit-window t win))
  (if qz/buffer-popup-final
      (funcall qz/buffer-popup-final))
  (message "%s" qz/buffer-popup-last-value))

(defun qz/buffer-popup-commit ()
  (interactive)
  (qz/buffer-popup-finalize t))

(defun qz/buffer-popup-abort ()
  (interactive)
  (qz/buffer-popup-finalize nil t))


(defun qz/buffer-popup-create ()
  (interactive)
  (select-window
   (display-buffer
    (with-current-buffer (get-buffer-create
                          (format "*Edit stuff %s*"
                                  (buffer-name)))
      (qz/buffer-popup-minor-mode 1)
      (org-mode)
      (setq qz/buffer-popup-current-or-last (current-buffer)))
    qz/buffer-popup-window-config))
  qz/buffer-popup-current-or-last)
#+end_src

#+RESULTS:
: qz/buffer-popup-create

*** TODO insert var
stealing from 'describe-variable -> cool to insert the value of named var, from completing read
#+begin_src emacs-lisp
(defun qz/insert-var ()
  (interactive)
  (completing-read
   (format-prompt "Describe variable" (and (symbolp (variable-at-point) (variable-at-point)))
                  #'help--symbol-completion-table
                  (lambda (vv)
                    ;; In case the variable only exists in the buffer
                    ;; the command we switch back to that buffer before
                    ;; we examine the variable.
                    (with-current-buffer orig-buffer
                      (or (get vv 'variable-documentation)
                          (and (boundp vv) (not (keywordp vv))))))
                  t nil nil
                  (if (symbolp v) (symbol-name v)))))
#+end_src

*** contract file name
keep it relative; sorry Ayn
#+begin_src emacs-lisp
(defun qz/contract-file-name (file)
  "turn an objective path to a relative path to homedir `~/`"
  (replace-regexp-in-string(expand-file-name "~/") "~/" file))
#+end_src

#+RESULTS:
: qz/contract-file-name


*** toggle between non-nil -> [ 0 | 1 ], [ on | off ]
This function is used for quality of life in ensuring correct bottom values are
used when toggling modes; the set of activation values are not necessarily using
~[t | nil]~, but can be =[(t n>0) | n<=0]=, which can throw a spanner in the
works for a regular style ~(mode (setq toggle (not toggle)))~ type of
arrangement, given ~[t | nil]~.

An example of this can be found in [[Time in the modeline]], or [[Toggle
ERROR_ROLLBACK]]. Equal is used here to coerce non-numeric arguments into
something that will toggle.
#+begin_src emacs-lisp
(defun qz/toggle-1->0 (n)
  (if (equal 1 n) 0 1))

(defun qz/toggle-on->off (n)
  (if (equal 1 n) "on" "off"))
#+end_src

#+RESULTS:
: qz/toggle-on->off

*** pprint with ~cl-prettyprint~
[[https://stackoverflow.com/questions/3552106/pprint-in-emacs-lisp][elisp - PPRINT in Emacs Lisp? - Stack Overflow]]

#+begin_src emacs-lisp
(defun qz/pprint (form &optional output-stream)
  (princ (with-temp-buffer
           (cl-prettyprint form)
           (buffer-string))
         output-stream))
#+end_src

#+RESULTS:
: qz/pprint

*** fix [[file:../../../life/roam/20201019T125728Z-bluetooth_headphones.org][bluetooth headphones]]
#+begin_src emacs-lisp
(defun qz/bt-a2dp ()
  (interactive)
  (shell-command "pactl set-card-profile bluez_card.2C_41_A1_87_20_BA a2dp_sink"))

(defun qz/bt-headphone-off ()
  (interactive)
  (async-shell-command "bluetoothctl disconnect 2C:41:A1:87:20:BA"))

(defun qz/bt-headphone-on ()
  (interactive)
  (async-shell-command "bluetoothctl connect 2C:41:A1:87:20:BA"))
#+end_src

#+RESULTS:
: qz/bt-headphone-on
*** TODO mouse button fuckery :func:
found some rabbit hole when playing with org-noter
- #'read-event
  + #'org-noter--get-precise-info
  + reads the row of the posn from the event, sums offset, maps to pdf position.
    good job org-noter developer
- #'event-start
- #'posn
- #'mouse-pixel-position

what's strange to me is that #'qz/event-line-offset, which triggers
#'read-event, will report a consistent range numbers, but #'thing-at-point will
often start sending out lower numbers.
- this might be because of posn information around headings, taking some number
  relative to an org heading?
#+begin_src emacs-lisp

;;  (org-noter-insert-note (org-noter--get-precise-info))
;; ~read-event~ is cool -> org-noter--get-precise-info

(defun qz/event-line-offset ()
  "testing click at point functions'"
  (interactive)
  (message (number-to-string (cdr (posn-col-row  (event-start  (read-event "Click!")))))))

(defun qz/thing-at-point ()
  (interactive)
    (cdr (posn-col-row
      (let* ((m (mouse-pixel-position))
             (xy (cdr m)))
        (posn-at-x-y (car xy) (cdr xy) (car m))))))

;;(message (number-to-string (car (posn-col-row (posn-at-point (point)))))))

;;(map! "C-<down-mouse-1>" #'qz/thing-at-point)

;;'(#<window 832 on config.org> ; window
;;  5080        ; area-or-pos
;;  (413 . 966) ; (x . y)
;;  0           ; timestamp
;;  nil         ; object
;;  5080        ; pos
;;  (41 . 50)   ; (col . row)
;;  nil         ; image
;;  (333 . 16)  ; (dx . dy)
;;  (10 . 19))  ; (width . height)
#+end_src

#+begin_src emacs-lisp
(defun qz/org-noter--get-precise-info ()
                                        ;(org-noter--with-valid-session
  (let ((window (org-noter--get-doc-window))
        (mode (org-noter--session-doc-mode session))
        event)
    (with-selected-window window
      (while (not (and (eq 'mouse-1 (car event))
                       (eq window (posn-window (event-start event)))))
        (setq event (read-event "Click where you want the start of the note to be!")))
      (cond
       ((run-hook-with-args-until-success 'org-noter--get-precise-info-hook mode))

       ((eq mode 'pdf-view-mode)
        (if (pdf-view-active-region-p)
            (cadar (pdf-view-active-region))
          (org-noter--conv-page-scroll-percentage
           (+ (window-vscroll)
              (cdr (posn-col-row (event-start event)))))))

       ((eq mode 'doc-view-mode)
        (org-noter--conv-page-scroll-percentage
         (+ (window-vscroll)
            (cdr (posn-col-row (event-start event))))))

       ((eq mode 'nov-mode)
        (if (region-active-p)
            (min (mark) (point))
          (posn-point (event-start event))))))));)

;;(qz/org-noter--get-precise-info)
#+end_src

#+RESULTS:
: qz/org-noter--get-precise-info

* Visual
** Fonts & Text :vars:

#+begin_src emacs-lisp
(setq doom-font (font-spec :family "monospace" :size qz/font-default))
(setq doom-theme nil)
(setq doom-modeline-height 10)
(setq display-line-numbers-type nil)
(set-language-environment "UTF-8")
(set-default-coding-systems 'utf-8)
#+end_src

#+RESULTS:
: (utf-8-unix . utf-8-unix)

** Tooltips :init:
#+begin_src emacs-lisp
(tooltip-mode 1)
#+end_src

#+RESULTS:
: t

** Time in the modeline :kbd:
An example of this can be found in [[Time in the modeline]]. Equal is used here to
coerce non-numeric arguments into something that will toggle.
#+begin_src emacs-lisp
(setq qz/toggle-time-state t)
(display-time-mode qz/toggle-time-state)

(defun qz/toggle-time-in-modeline ()
  (interactive)
  (message
   (concat "Time display in modeline is "
           (if (display-time-mode
                (setq qz/toggle-time-state
                      (qz/toggle-1->0 qz/toggle-time-state)))
               "on" "off"))))

(map! :leader
      (:prefix-map ("t" . "toggle")
       :desc "Time in the modeline"   "T" #'qz/toggle-time-in-modeline))
#+end_src

#+RESULTS:
: qz/toggle-time-in-modeline

** [[file:../../../life/roam/20200623T110813Z-elegance_el.org][Elegance]] :init:
#+begin_src emacs-lisp
                                        ;(load! "elegance/elegance.el")
                                        ;(load! "elegance/sanity.el")
#+end_src

#+RESULTS:

** Writeroom :vars:

#+begin_src emacs-lisp
(setq writeroom-width 80)

(add-to-list 'writeroom-mode-hook
             (lambda () (setq writeroom-border-width 50)))

#+end_src

#+RESULTS:
| (lambda nil (setq writeroom-border-width 50)) | +zen-enable-mixed-pitch-mode-h |

** Theme :func:
#+begin_src emacs-lisp
(defun qz/load-tron-legacy ()
  (interactive)
  (add-to-list 'custom-theme-load-path "~/.emacs.d/.local/straight/repos/tron-legacy-emacs-theme/")
  (load-theme 'tron-legacy t)
  (setq tron-legacy-vivid-cursor t))

(defun qz/load-k ()
  (interactive)
  (load-theme 'k t))

(defun qz/load-pink-mountain ()
  (interactive)
  (load-theme 'pink-mountain t))

;; cba
(load-theme 'modus-vivendi t)
#+end_src

#+RESULTS:
: qz/load-pink-mountain

** [[file:../../../life/roam/20200722T142750Z-ivy_posframe.org][ivy-posframe]] :init:
[[https://github.com/tumashu/ivy-posframe][GitHub - tumashu/ivy-posframe: ivy-posframe is a ivy extension, which let ivy...]]


#+begin_src emacs-lisp
;(require 'ivy-posframe)
;
;(defun sarg/ivy-posframe-poshandler (info)
;  (setq-local
;   workarea (elt exwm-workspace--workareas exwm-workspace-current-index)
;   return-value (posframe-poshandler-frame-center info)
;    (cons (+ (aref workarea 0) (car return-value))
;          (+ (aref workarea 1) (cdr return-value))))
;  return-value)
;
;(defun sarg/ivy-posframe-exwm (str)
;  (ivy-posframe--display str #'sarg/ivy-posframe-poshandler))
;
;(after! ivy-posframe
;  (setq ivy-posframe-display-functions-alist '((t . sarg/ivy-posframe-exwm))
;        ivy-posframe-border-width 4
;        ivy-posframe-parameters '((parent-frame nil))))
;
;(ivy-posframe-mode 1)
#+end_src

#+RESULTS:

** Transparency :func:
Totally stolen from [[https://www.emacswiki.org/emacs/TransparentEmacs][EmacsWiki: Transparent Emacs]].
#+begin_src emacs-lisp
(setq qz/preferred-transparency-alpha '(80 . 70))

(set-frame-parameter (selected-frame) 'alpha qz/preferred-transparency-alpha)
(add-to-list 'default-frame-alist `(alpha . ,qz/preferred-transparency-alpha))

(defun qz/toggle-transparency ()
  "Toggle between max opacity and `qz/preferred-transparency-alpha'"
  (interactive)
  (let ((alpha (frame-parameter nil 'alpha)))
    (set-frame-parameter
     nil 'alpha
     (if (eql (cond ((numberp alpha) alpha)
                    ((numberp (cdr alpha)) (cdr alpha))
                    ;; Also handle undocumented (<active> <inactive>) form.
                    ((numberp (cadr alpha)) (cadr alpha)))
              100)
         qz/preferred-transparency-alpha '(100 . 100))))
  (message (concat "Frame transparency set to "
                   (number-to-string (car (frame-parameter nil 'alpha))))))
#+end_src

#+RESULTS:
: qz/toggle-transparency

** [[file:../../../life/roam/20200613T123425Z-emacs_bgex.org][bgex]] :init:
To create a source image, run ~convert a.png a.xpm~
#+begin_src emacs-lisp :tangle no
;(load-file "~/.doom.d/snippets/bgex.el")
;(require 'bgex)

;; Image on frame (dynamic color mode (SRC * DST / factor))
;; (bgex-set-image-default "~/.config/wall.xpm" t)
;; Color for HTML-mode (dynamic color mode)
;; (bgex-set-color "HTML" 'bgex-identifier-type-major-mode '(60000 40000 40000) t)

;; ;; Color for buffer-name (*scratch*)
;; (bgex-set-color "*scratch*" 'bgex-identifier-type-buffer-name "skyblue")
;; (bgex-set-color-default "skyblue")
;; ;; XPM string
;; (bgex-set-xpm-string "*scratch*" 'bgex-identifier-type-buffer-name "XPM string" t)
;; (bgex-set-xpm-string-default "XPM strging" t)
#+end_src

#+RESULTS:
** [[file:../../../life/roam/20200722T143926Z-perfect_margin.org][perfect-margin]]
#+begin_src emacs-lisp
(perfect-margin-mode 1)
(setq perfect-margin-ignore-regexps nil)
#+end_src

#+RESULTS:

* [[file:../../../life/roam/20200615T124606Z-exwm.org][EXWM]]
Big thanks to https://github.com/akirak/emacs.d

** randr, for display :func:init:
#+begin_src emacs-lisp
(require 'exwm-randr)

(defun qz/exwm-usbc-ultrawide ()
   (setq exwm-randr-workspace-monitor-plist '(0 "DP-2"))
  (add-hook
   'exwm-randr-screen-change-hook
   (lambda ()
     (start-process-shell-command
      "xrandr" nil
      "xrandr --output HDMI-2 --off --output HDMI-1 --off --output DP-1 --off --output eDP-1 --off --output DP-2 --primary --mode 5120x1440 --pos 0x0 --rotate normal")))
  (exwm-randr-enable))

(defun qz/exwm-hdmi-ultrawide ()
  (setq exwm-randr-workspace-monitor-plist '(0 "HDMI-1"))
  (add-hook
   'exwm-randr-screen-change-hook
   (lambda ()
     (start-process-shell-command
      "xrandr" nil
      "xrandr --output eDP-1 --off --output DP-1 --off --output HDMI-1 --primary --mode 5120x1440 --pos 0x0 --rotate normal --output DP-2 --off --output HDMI-2 --off")))
  (exwm-randr-enable))

(qz/exwm-usbc-ultrawide)
(exwm-enable)
#+end_src

#+RESULTS:
** wallpaper :init:
<link-to-elisp-doc 'wallpaper-cycle-interval> is measured in seconds, 900 being 15 minutes
#+begin_src emacs-lisp
(setq wallpaper-cycle-interval 900)

(use-package! wallpaper
  :hook ((exwm-randr-screen-change . wallpaper-set-wallpaper)
         (after-init . wallpaper-cycle-mode))
  :custom ((wallpaper-cycle-interval 900)
           (wallpaper-cycle-single t)
           (wallpaper-scaling 'fill)
           (wallpaper-cycle-directory "~/.config/wallpapers")))
#+end_src

#+RESULTS:
| org-roam-mode | wallpaper-cycle-mode | (closure (t) (&rest _) (progn (eval-after-load 'sly #'(lambda nil (sly-setup))))) | doom-modeline-mode | doom-init-fonts-h | doom-init-theme-h | doom-init-leader-keys-h | x-wm-set-size-hint | tramp-register-archive-file-name-handler | magit-maybe-define-global-key-bindings | magit-auto-revert-mode--init-kludge | magit-startup-asserts | magit-version | table--make-cell-map |

** TODO startup programs :init:
#+begin_src emacs-lisp
(setq qz/startup-programs
      '("compton"
        "unclutter"))

(defun qz/run-programs-n-process (p)
  (mapcar (lambda (c) (start-process-shell-command c nil c)) p))

(defun qz/seq-to-kill (p)
  (mapcar (lambda (s) (concat "killall " s)) p))

(defun qz/run-startup-programs ()
  (interactive)
  (qz/run-programs-n-process
   (qz/seq-to-kill qz/startup-programs))
  (qz/run-programs-n-process qz/startup-programs))

(qz/run-startup-programs)
#+end_src

#+RESULTS:
| compton | unclutter |

** global bindings :kbd:
#+begin_src emacs-lisp
(require 'exwm-input)

(defmacro qz/exwm-bind-keys (&rest bindings)
  "Bind input keys in EXWM.
INDINGS is a list of cons cells containing a key (string) and a command."
  `(progn
     ,@(cl-loop for (key . cmd) in bindings
                collect `(exwm-input-set-key
                          ,(cond ((stringp key) (kbd key))
                                 (t key))
                          (quote ,cmd)))))

(require 'window-go)
(qz/exwm-bind-keys
 ("s-r" . exwm-reset)                     ;; `s-r': Reset (to line-mode).
 ("s-w" . exwm-workspace-switch)          ;; `s-w': Switch workspace.
 ("s-&" . qz/read-process-shell-command)  ;; `s-&': Launch program
 ("s-h" . windmove-left)
 ("s-j" . windmove-down)
 ("s-k" . windmove-up)
 ("s-l" . windmove-right)
 ("s-n" . switch-to-next-buffer)
 ("s-p" . switch-to-prev-buffer)
 ("s-0" . delete-window)
 ("s-+" . delete-other-windows)
 ("s-b" . qz/exwm-goto-browser)
 ("s-a" . qz/org-agenda-gtd))
#+end_src

#+RESULTS:

** simulation keys :kbd:
#+begin_src emacs-lisp
(defvar qz/default-simulation-keys
  '(;; movement
    ([?\C-b] . left)
    ([?\M-b] . C-left)
    ([?\C-f] . right)
    ([?\M-f] . C-right)
    ([?\C-p] . up)
    ([?\C-n] . down)
    ([?\C-a] . home)
    ([?\C-e] . end)
    ([?\M-v] . prior)
    ([?\C-v] . next)
    ([?\C-d] . delete)
    ([?\C-k] . (S-end delete))
    ([?\M-d] . (C-S-right delete))
    ;; cut/paste.
    ([?\C-w] . ?\C-x)
    ([?\M-w] . ?\C-c)
    ([?\C-y] . ?\C-v)
    ;; search
    ([?\C-s] . ?\C-f)))

(with-eval-after-load 'exwm-input
  (exwm-input-set-simulation-keys qz/default-simulation-keys))
#+end_src

#+RESULTS:

+RESULTS:
** minibuffer :vars:
#+begin_src emacs-lisp
;(setq exwm-workspace-minibuffer-position 'top)
#+end_src

#+RESULTS:

** remove menu & dialog :vars:
#+begin_src emacs-lisp
(menu-bar-mode -1)
(setq mouse-autoselect-window t
      use-dialog-box nil)
#+end_src

#+RESULTS:
** workspaces & Classes :vars:
#+begin_src emacs-lisp
;; Set the initial workspace number.
(unless (get 'exwm-workspace-number 'saved-value)
  (setq exwm-workspace-number 4))

;; Make class name the buffer name
(add-hook 'exwm-update-class-hook
          (lambda () (exwm-workspace-rename-buffer exwm-class-name)))
#+end_src

#+RESULTS:
| lambda | nil | (exwm-workspace-rename-buffer exwm-class-name) |

** window dividers :vars:
#+begin_src emacs-lisp
(setq window-divider-default-right-width 4)
(setq window-divider-default-bottom-width 4)
(window-divider-mode 1)
#+end_src

#+RESULTS:
: t

** mark windows as real :func:
Emacs can recognise x-windows as 'real' per <link-to-elisp-doc 'doom-real-buffer-p>

#+begin_src emacs-lisp
(add-hook 'exwm-mode-hook #'doom-mark-buffer-as-real-h)
(add-hook 'doom-switch-window-hook #'doom-mark-buffer-as-real-h)

(defun qz/mark-this-buffer-as-real ()
  (interactive)
  (doom-mark-buffer-as-real-h))
#+end_src

#+RESULTS:
: qz/mark-this-buffer-as-real

** shell command readline :func:
#+begin_src emacs-lisp
(defun qz/read-process-shell-command (command)
  "Used to launch a program by creating a process. Invokes
start-process-shell-command' with COMMAND"
  (interactive (list (read-shell-command "λ ")))
  (start-process-shell-command command nil command))
#+end_src

#+RESULTS:
: qz/read-process-shell-command

** title as buffer naming hook :func:
suspicious; acts as soon as eval'd
#+begin_src emacs-lisp
(add-hook 'exwm-update-title-hook
          (lambda () (exwm-workspace-rename-buffer exwm-title)))
#+end_src

#+RESULTS:
| lambda | nil | (exwm-workspace-rename-buffer exwm-title) |

** TODO screenshotting with selection / window from dmenu script :func:
** automatically float windows :func:
#+begin_src emacs-lisp
(defcustom qz/exwm-floating-window-classes '("keybase")
  "List of instance names of windows that should start in the floating mode.")

(defun qz/exwm-float-window-on-specific-windows ()
  (when (member exwm-instance-name qz/exwm-floating-window-classes)
    (exwm-floating-toggle-floating)))
(add-hook 'exwm-manage-finish-hook #'qz/exwm-float-window-on-specific-windows)
#+end_src

#+RESULTS:
| qz/exwm-float-window-on-specific-windows |

** goto :func:
#+begin_src emacs-lisp
(defun exwm-goto--switch-to-buffer (buf)
  (if-let ((w (get-buffer-window buf t)))
      (select-window w)
    (exwm-workspace-switch-to-buffer buf)))

(cl-defun exwm-goto (command &key class)
  (if-let ((bs (cl-remove-if-not (lambda (buf)
                                   (with-current-buffer buf
                                     (and (eq major-mode 'exwm-mode)
                                          (cond
                                           ((stringp class)
                                            (string-equal class exwm-class-name))))))
                                 (buffer-list))))
      (exwm-goto--switch-to-buffer (car bs))
    (start-process-shell-command class nil command)))
#+end_src

#+RESULTS:
: exwm-goto

** goto apps :func:
#+begin_src emacs-lisp
(defun qz/exwm-goto-browser ()
  (interactive)
  (exwm-goto "firefox" :class "Firefox"))
#+end_src

#+RESULTS:
: qz/exwm-goto-browser

* Emacs Server :init:
#+begin_src emacs-lisp
(server-start)
#+end_src

#+RESULTS:

* TODO Hydra
** n :kbd:
The =n= of {C-c n} denotes notes.

#+begin_src emacs-lisp
(map! :leader
      (:prefix-map ("n" . "notes")
       (:prefix-map ("d" . "by date")
          :desc "Arbitrary date" "d" #'org-roam-dailies-date
          :desc "Today"          "t" #'org-roam-dailies-today
          :desc "Tomorrow"       "m" #'org-roam-dailies-tomorrow
          :desc "Yesterday"      "y" #'org-roam-dailies-yesterday)
       "f" #'org-roam-find-file
       "F" #'find-file-in-notes))
#+end_src

#+RESULTS:
: find-file-in-notes

* [[file:../../../life/roam/20200412130848-programming.org][Programming]]
** [[file:../../../life/roam/20200623T110142Z-sql.org][SQL]]
For reference: [[https://www.emacswiki.org/emacs/SqlMode][EmacsWiki: Sql Mode]]
*** Toggle ERROR_ROLLBACK :psql:func:
#+begin_src emacs-lisp
(setq qz/psql-error-rollback 0)

(qz/toggle-1->0 qz/psql-error-rollback)

(defun qz/psql-toggle-error-rollback ()
  (interactive)
  (setq qz/psql-error-rollback
        (qz/toggle-1->0 qz/psql-error-rollback))
  (sql-send-string
   (concat "\\set ON_ERROR_ROLLBACK "
           (qz/toggle-on->off qz/psql-error-rollback)))
  (sql-send-string
   "\\echo ON_ERROR_ROLLBACK is :ON_ERROR_ROLLBACK"))
#+end_src

#+RESULTS:
: qz/psql-toggle-error-rollback

*** Upcase SQL Keywords :func:
Lifted from [[https://www.emacswiki.org/emacs/SqlMode#toc4][EmacsWiki: Sql Mode]] (#toc4)
#+begin_src emacs-lisp
  (defun qz/upcase-sql-keywords ()
    (interactive)
    (save-excursion
      (dolist (keywords sql-mode-postgres-font-lock-keywords)
        (goto-char (point-min))
        (while (re-search-forward (car keywords) nil t)
          (goto-char (+ 1 (match-beginning 0)))
          (when (eql font-lock-keyword-face (face-at-point))
            (backward-char)
            (upcase-word 1)
            (forward-char))))))
#+end_src

#+RESULTS:
: qz/upcase-sql-keywords

** paredit
*** paredit-forward/backward-slurp {M-n/p} :kbd:
#+begin_src emacs-lisp
(map! :mode paredit-mode
      "M-p" #'paredit-forward-slurp-sexp
      "M-n" #'paredit-backward-slurp-sexp)
#+end_src

#+RESULTS:

** [[file:../../../life/roam/20200402172258-common_lisp.org][Common Lisp]]
*** cl-font-lock-built-in-mode :vars:
"Highlight built-in functions, variables, and types in ‘lisp-mode’."
- Enable feature from 28.1 if exists
  <link-to-elisp-doc 'cl-font-lock-built-in-mode>
#+begin_src emacs-lisp
(if (symbolp 'cl-font-lock-built-in-mode)
    (cl-font-lock-built-in-mode 1))
#+end_src

#+RESULTS:
: t

*** sly eval-overlay :func:

Using the handy [[https://github.com/xiongtx/eros][eros]], advice from [[https://www.reddit.com/r/emacs/comments/bi4xk1/evaluation_overlays_in_slime_for_common_lisp/][Evaluation overlays in slime for common lisp : emacs]]
#+begin_src emacs-lisp :tangle no
(autoload 'cider--make-result-overlay "cider-overlays")

(defun endless/eval-overlay (value point)
  (cider--make-result-overlay (format "%S" value)
                              :where point
                              :duration 'command)
  ;; Preserve the return value.
  value)


;; (define-key! 'sly-mode-map "C-x C-e" 'sly-eval-last-expression)
#+end_src

#+RESULTS:
: endless/eval-overlay

** [[file:../../../life/roam/20200415T145703Z-emacs_lisp.org][Emacs Lisp]]
*** eval-defun :kbd:
#+begin_src emacs-lisp
(define-key! emacs-lisp-mode-map "C-c C-c" 'eval-defun)
#+end_src

#+RESULTS:

*** ingredients
Some code wrapping [[file:../../../life/roam/20201014T121143Z-schollz_ingredients_extract_recipe_ingredients_from_any_recipe_website_on_the_internet.org][schollz/ingredients]], outputting some [[file:../../../life/roam/20200515T120103Z-org_mode.org][org-mode]] heading & body
#+begin_src emacs-lisp
(setq qz/buffer-mod-commands '(qz/get-ingredients-mod-buffer))

(defun qz/get-ingredients-mod-buffer ()
  "scrape the website found in ROAM_KEY for ingredients,
outputting the result in the buffer at-point"
  (interactive)
  (let* ((c (current-buffer))
         (pt (point))
         (json-object-type 'hash-table)
         (json-array-type 'list)
         (json-key-type 'string)
         (jsono (json-read-from-string
                 (shell-command-to-string
                  (concat "~/.local/bin/ingredients " (+org--get-property "roam_key")))))
         (ingreds (gethash "ingredients" jsono)))
    (insert "* Ingredients\n")
    (insert
     (apply
      'concat
      (mapcar (lambda (e)
                (concat "- " (gethash "line" e)
                        " [" (number-to-string (gethash "cups" (gethash "measure" e)))
                        " cups]\n")) ingreds)))))

(defun qz/read-property-mod-buffer ()
 (interactive)
 (let* ((command (completing-read "command: " qz/buffer-mod-commands))
       (args (+org--get-property (completing-read "property: " org-default-properties))))
   (setq current-prefix-arg '(4))
   (shell-command (concat command " " args " &"))))
#+end_src

#+RESULTS:
: qz/read-property-mod-buffer

** eshell
also, see [[~/.eshellrc][~/.eshellrc]]
*** sudo
#+begin_src emacs-lisp
(require 'em-tramp)
(setq eshell-prefer-lisp-functions nil
      eshell-prefer-lisp-variables t
      password-cache t
      password-cache-expiry 300) 

#+end_src

#+RESULTS:
: 300

* [[file:../../../life/roam/20200511T193645Z-gnu_hyperbole.org][Hyperbole]]
** Initialisation :init:
#+begin_src emacs-lisp
(require 'hyperbole)
#+end_src

#+RESULTS:
: hyperbole

** Action-Key with mouse buttons :kbd:
#+begin_src emacs-lisp
(map! "C-<mouse-2>" #'hkey-either)
#+end_src

#+RESULTS:

* PDF
** Dark-Mode on entry :vars:
This function takes colours from the current [[Theme]], and applies a colour-mask to
the view of the pdf as it's rendered by PDFTools.
#+begin_src emacs-lisp
(add-hook 'pdf-view-mode-hook #'pdf-view-midnight-minor-mode)
#+end_src

#+RESULTS:
| (closure (t) (&rest _) (add-hook 'kill-buffer-hook #'+pdf-cleanup-windows-h nil t)) | doom--setq-evil-normal-state-cursor-for-pdf-view-mode-h | pdf-tools-enable-minor-modes | doom-modeline-set-pdf-modeline | pdf-view-midnight-minor-mode |
** mouse precise note insert {C-<mouse-1>}
also, for mouse fuckery, see [[mouse button fuckery]]
#+begin_src emacs-lisp
(defun qz/noter-create-precise ()
  (interactive)
  (org-noter-insert-note (qz/get-precise)))


(defun qz/noter-create-precise-buffer-popup ()
  (interactive)
  (setq qz/org-noter-buffer (current-buffer)
        qz/precise-pos (qz/get-precise)
        qz/buffer-popup-final
        (lambda ()
          (message "yeet")
          (with-current-buffer qz/org-noter-buffer
            (qz/org-noter-insert-note qz/buffer-popup-last-value
                                      qz/precise-pos))))
  (qz/buffer-popup-create))

(defun qz/get-precise ()
  (interactive)
  (let ((v   (org-noter--conv-page-scroll-percentage
      (+ (window-vscroll)
         (qz/thing-at-point))))
)
(message "%s" v)
v))


(map! :mode pdf-sync-minor-mode
      "C-<mouse-1>" #'qz/noter-create-precise-buffer-popup)
(map!
      "C-<mouse-1>" #'qz/noter-create-precise-buffer-popup)
#+end_src
** highlight region in pdf with {h}
#+begin_src emacs-lisp
(map! :mode pdf-view-mode
      "h" #'pdf-annot-add-highlight-markup-annotation)
#+end_src
* [[file:../../../life/roam/20200722T143145Z-keyfreq.org][KeyFreq]] :init:
A package that logs command usage; blessed be Xah Lee
#+begin_src emacs-lisp
(keyfreq-mode 1)
(keyfreq-autosave-mode 1)
#+end_src

#+RESULTS:
: t

* org
** [[file:../../../life/roam/20200515T120103Z-org_mode.org][org-mode]] :init:vars:
#+begin_src emacs-lisp :results none
(use-package! org
  :mode ("\\.org\\'" . org-mode)
  :init
  (map! :leader
        :prefix "n"
        "l" #'org-capture)
  (map! :map org-mode-map
        "M-n" #'outline-next-visible-heading
        "M-p" #'outline-previous-visible-heading
        "C->" #'org-do-demote
        "C-<" #'org-do-promote)
  (setq org-src-window-setup 'current-window
        org-return-follows-link t
        org-babel-load-languages '((emacs-lisp . t)
                                   (lisp . t)
                                   (jupyter . t)
                                   (python . t)
                                   (ipython . t)
                                   (R . t))
        org-ellipsis " ▼ "
        org-confirm-babel-evaluate nil
        org-use-speed-commands t
        org-catch-invisible-edits 'show
        org-preview-latex-image-directory "/tmp/ltximg/"
        ;; ORG SRC BLOCKS {C-c C-,}
        org-structure-template-alist '(("q" . "quote")
                                       ("d" . "definition")
                                       ("s" . "src")
                                       ("sb" . "src bash")
                                       ("se" . "src emacs-lisp")
                                       ("sp" . "src psql")
                                       ("jp" . "src jupyter-python")
                                       ("jr" . "src jupyter-R")
                                       ("sr" . "src R")
                                       ("el" . "src emacs-lisp")))
  (with-eval-after-load 'flycheck
    (flycheck-add-mode 'proselint 'org-mode)))
#+end_src



** tweaks :vars:
*** File apps
Handle opening with { C-c C-o } or { RET } or { mouse-1 }
- <link-to-elisp-doc 'org-file-apps>

#+begin_src emacs-lisp
(setq org-file-apps
      '((auto-mode . emacs)
        (directory . emacs)
        ("\\.mm\\'" . default)
        ("\\.x?html?\\'" . default)
        ("\\.pdf\\'" . emacs)))
#+end_src

#+RESULTS:
: ((auto-mode . emacs) (directory . emacs) (\.mm\' . default) (\.x?html?\' . default) (\.pdf\' . emacs))

*** Cleanup ~org-mode-hook~
#+begin_src emacs-lisp
(eval-after-load nil
  (remove-hook 'org-mode-hook #'ob-ipython-auto-configure-kernels))
#+end_src

#+RESULTS:
*** Strikethough DONE headings
#+begin_src emacs-lisp
(if (boundp 'org-headline-done) (set-face-attribute 'org-headline-done nil :strike-through t))
#+end_src

#+RESULTS:

**** DONE YEAH BOY HAHAHAHAHAHAHAAHAHAHAHAHAHAHAHAHAHAHAHAHAHA
*** auto insert headings that match radio text + tagging
#+begin_src emacs-lisp
(defun qz/definer-headliner (s) "civiliser 85er" (concat "<<<.*-" s ">>>.*:" s ":"))

(defun qz/get-radio-naked (r)
  (car (split-string (cadr (split-string r "<<<")) ">>>")))

;;(qz/get-radio-naked "<<<data>>>")

(defun qz/insert-radio-children ()
  "fucking awesome"
  (interactive)
  (org-with-wide-buffer
   (org-back-to-heading t)
   (let* ((case-fold-search nil)
          (pt (point)))
     (when (looking-at org-complex-heading-regexp)
       (let ((relate (qz/get-radio-naked (match-string-no-properties 4))))
         (message "relating: %s" relate)
         (mapc (lambda (s) (save-excursion (message "inserting subheading %s" s) (org-insert-subheading nil) (insert s) s))
               (mapcar #'qz/get-radio-naked
                       (qz/matches-in-buffer (message (qz/definer-headliner relate))))))))))

(defun qz/matches-in-buffer (regexp &optional buffer with-point?)
  "return a list of matches of REGEXP in BUFFER or the current buffer if not given."
  (let ((matches))
    (save-match-data
      (save-excursion
        (with-current-buffer (or buffer (current-buffer))
          (save-restriction
            (widen)
            (goto-char 1)
            (while (search-forward-regexp regexp nil t 1)
              (let ((s (match-string-no-properties 0))
                    (push (if with-point? (cons s (point)) s) matches)))))))
      matches)))
#+end_src

#+RESULTS:
: qz/matches-in-buffer

** directories :vars:
#+begin_src emacs-lisp
(setq org-directory "~/life/"
      qz/notes-directory (concat org-directory "roam/")
      qz/org-agenda-directory qz/notes-directory
      qz/org-agenda-files (mapcar (lambda (f) (expand-file-name (concat qz/notes-directory f)))
                                  '("calendar-home.org" "calendar-work.org" "schedule.org"))
      org-ref-notes-directory qz/notes-directory
      bibtex-completion-notes-path qz/notes-directory
      org-ref-bibliography-notes "~/life/bib.org"
      org-noter-notes-search-path (list qz/notes-directory)
      org-roam-directory qz/notes-directory)
#+end_src

#+RESULTS:
: ~/life/roam/

** refile :vars:
#+begin_src emacs-lisp
(setq org-refile-targets '(("next.org" :level . 0)
                           ("reading.org" :level . 0)
                           ("watching.org" :level . 0)
                           ("learning.org" :level . 0)
                           ("inbox.org" :level . 0)
                           ("wip.org" :level . 1 )))
#+end_src

#+RESULTS:
: ((next.org :level . 0) (reading.org :level . 0) (watching.org :level . 0) (learning.org :level . 0) (wip.org :level . 1))





** org-jira :vars:
set in authinfo.el
** org-habit
#+begin_src emacs-lisp
(require 'org-habit)
#+end_src

#+RESULTS:
: org-habit

** org-fragtog :init:func:
#+begin_src emacs-lisp
(require 'org-fragtog)
(add-hook 'org-mode-hook 'org-fragtog-mode)
#+end_src

** org-auto-tangle :init:
#+begin_src emacs-lisp
(require 'org-auto-tangle)
(add-hook 'org-mode-hook 'org-auto-tangle-mode)
#+end_src

#+RESULTS:
| org-auto-tangle-mode | org-fragtog-mode | er/add-org-mode-expansions | +lookup--init-org-mode-handlers-h | (closure (t) (&rest _) (add-hook 'before-save-hook 'org-encrypt-entries nil t)) | #[0 \301\211\207 [imenu-create-index-function org-imenu-get-tree] 2] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-show-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes | doom-disable-show-paren-mode-h | doom-disable-show-trailing-whitespace-h | +org-enable-auto-reformat-tables-h | +org-enable-auto-update-cookies-h | +org-make-last-point-visible-h | toc-org-enable | org-eldoc-load | +literate-enable-recompile-h |

** [[file:../../../life/roam/20200701T083326Z-org_recoll.org][org-recoll]]
*** Initialisation :init:vars:

#+begin_src emacs-lisp
(require 'org-recoll)

(setq org-recoll-command-invocation "recollq -t -A"
      org-recoll-results-num 100)
#+end_src

#+RESULTS:
: 100

*** Bindings :kbd:
#+begin_src emacs-lisp
(map! "C-c g" #'org-recoll-search)
(map! "C-c u" #'org-recoll-update-index)
(map! :mode org-recoll-mode "q" #'kill-this-buffer)
#+end_src

#+RESULTS:

** org-protocol :init:
#+begin_src emacs-lisp
(require 'org-protocol)
#+end_src

#+RESULTS:
: org-protocol

** org-capture
*** TODO templates :init:vars:
#+begin_src emacs-lisp
(require 'org-capture)

(setq qz/capture-title-timestamp "%(qz/utc-timestamp)-${slug}")

(setq org-capture-templates
      `(("i" "inbox" entry
         (file ,(concat qz/org-agenda-directory "inbox.org"))
         "* TODO %? \nCREATED: %u\nFROM: %a")
        ;; capture link to live `org-roam' thing
        ("I" "current-roam" entry (file ,(concat qz/org-agenda-directory "inbox.org"))
         (function qz/current-roam-link)
         :immediate-finish t)
        ("n" "now, as in NOW" entry (file ,(concat qz/org-agenda-directory "wip.org"))
         "* TODO [#A1] %? \nDEADLINE: %T\nCREATED: %u")
        ;; fire directly into inbox
        ("c" "org-protocol-capture" entry (file ,(concat qz/org-agenda-directory "inbox.org"))
         "* TODO [[%:link][%:description]]\n\n %i"
         :immediate-finish t)
        ;; spanish language capturing
        ("v" "vocab; spanish" entry
         (file+headline ,(concat qz/notes-directory "spanish_language.org") "vocab, phrases")
         "** \"%?\" :es:\nFROM: %a\n\n*** :en:\n")
        ("w" "Weekly Review" entry
         (file+olp+datetree ,(concat qz/org-agenda-directory "reviews.org"))
         (file ,(concat qz/org-agenda-directory "templates/weekly_review.org")))
        ("r" "Reading" todo ""
         ((org-agenda-files '(,(concat qz/org-agenda-directory "reading.org")))))))
#+end_src

#+RESULTS:
| i | inbox | entry | (file ~/life/roam/inbox.org) | * TODO %? |
*** FIXME doom half-loaded buffer hack
https://github.com/hlissner/doom-emacs/issues/4832

#+begin_src emacs-lisp
(advice-add
 #'org-capture :around
 (lambda (fun &rest args)
   (letf! ((#'+org--restart-mode-h #'ignore))
     (apply fun args))))
#+end_src

#+RESULTS:
*** TODO weekly review
*** Convenience Functions :func:
#+begin_src emacs-lisp
;; helper capture function for `org-roam' for `agenda-mode'
(defun qz/org-inbox-capture ()
  (interactive)
  "Capture a task in agenda mode."
  (org-capture nil "i"))

(defun qz/org-roam-capture-current ()
  (interactive)
  "Capture a task in agenda mode."
  (org-capture nil "I"))

(defun qz/org-roam-capture-todo ()
  (interactive)
  "Capture a task in agenda mode."
  (org-roam-capture nil "_"))
#+end_src

#+RESULTS:
: qz/org-roam-capture-todo
**** current roam link
#+begin_src emacs-lisp
(defun qz/current-roam-link ()
  (interactive)
  "Get link to org-roam file with title"
  (concat "* TODO [[" (qz/contract-file-name (buffer-file-name (buffer-base-buffer))) "]["
          (car (org-roam--extract-titles)) "]]"))
#+end_src
** org-gcal
*** secret properties :vars:
set in authinfo.el

*** files :vars:
#+begin_src emacs-lisp
(setq org-gcal-fetch-file-alist
      `((,qz/calendar-home . ,(concat qz/notes-directory "calendar-home.org"))
        (,qz/calendar-work . ,(concat qz/notes-directory "calendar-work.org"))
        (,qz/calendar-shared . ,(concat qz/notes-directory "calendar-shared.org"))))
(qz/pprint org-gcal-fetch-file-alist)
#+end_src

#+RESULTS:
:
: (("imzaniiyt@gmail.com" . "~/life/roam/calendar-home.org")
:  ("ejf1ja19lprl01dbued3b67ctc@group.calendar.google.com" . "~/life/roam/calendar-work.org")
:  ("3dlc1cbk5nidjfrvrvkap0cndo@group.calendar.google.com" . "~/life/roam/calendar-shared.org"))

*** recurring events headlines
#+begin_src emacs-lisp
(setq org-gcal-recurring-events-mode 'nested)
#+end_src

#+RESULTS:
: nested

** [[file:../../../life/roam/20200401202402-org_roam.org][org-roam]]
*** Initialisation :init:vars:
#+begin_src emacs-lisp
(use-package! org-roam
  :commands (org-roam-insert org-roam-find-file org-roam-switch-to-buffer org-roam)
  :hook
  (after-init . org-roam-mode)
  :custom-face
  (org-roam-link ((t (:inherit org-link :foreground "#df85ff"))))
  :init
  (map! :leader
        :prefix "n"
        :desc "org-roam" "l" #'org-roam
        :desc "org-roam-switch-to-buffer" "b" #'org-roam-switch-to-buffer
        :desc "org-roam-find-file" "f" #'org-roam-find-file
        :desc "org-roam-insert" "i" #'qz/roam-insert
        :desc "org-agenda-todo" "t" #'qz/org-agenda-todo
        :desc "org-roam-dailies-today" "J" #'org-roam-dailies-today
        :desc "org-roam-dailies-capture-today" "j" #'org-roam-dailies-capture-today
        :desc "qz/org-roam-capture-current" "C" #'qz/org-roam-capture-current
        :desc "qz/org-roam-capture-current" "C-c" #'qz/org-roam-capture-current
        :desc "qz/org-gcal--current" "C-c" #'qz/org-roam-capture-current
        :desc "org-roam-capture" "c" #'org-roam-capture)
  (setq org-roam-directory qz/notes-directory
        org-roam-dailies-directory qz/notes-directory
        org-roam-db-location (concat org-roam-directory "org-roam.db")
        org-roam-db-update-idle-seconds 0
        org-roam-graph-executable "dot"
        org-roam-graph-extra-config '(("overlap" . "false"))
        org-roam-graph-exclude-matcher nil)

  :config
  (require 'org-roam-protocol))

(org-roam-mode +1)
#+end_src

#+RESULTS:
: t

*** capture templates, roam :vars:
#+begin_src emacs-lisp
(setq qz/org-roam-capture-head
      "#+setupfile:./hugo_setup.org
,#+hugo_section: zettels
,#+hugo_slug: ${slug}
,#+title: ${title}\n")

(setq org-roam-capture-templates
      `(("d" "default" plain (function org-roam--capture-get-point)
         "%?"
         :file-name ,qz/capture-title-timestamp
         :head ,qz/org-roam-capture-head
         :unnarrowed t)
        ("_" "pass-though-todo" plain (function org-roam--capture-get-point)
         "%?"
         :file-name ,qz/capture-title-timestamp
         :head ,qz/org-roam-capture-head
         :immediate-finish t)
        ("p" "private" plain (function org-roam-capture--get-point)
         "%?"
         :file-name ,(concat "private-" qz/capture-title-timestamp)
         :head ,qz/org-roam-capture-head
         :unnarrowed t)))
#+end_src

#+RESULTS:
| d | default | plain | #'org-roam--capture-get-point | %? | :file-name | %(qz/utc-timestamp)-${slug} | :head | #+setupfile:./hugo_setup.org |

*** capture templates, protocol :vars:
#+begin_src emacs-lisp
(setq org-roam-capture-ref-templates
      `(("r" " ref" plain (function org-roam-capture--get-point)
         "%?"
         :file-name ,qz/capture-title-timestamp
         :head "#+setupfile:./hugo_setup.org
#+roam_key: ${ref}
#+hugo_slug: ${slug}
#+title: ${title}
#+source: ${ref}"
         :unnarrowed t)))
#+end_src

#+RESULTS:
| r | ref | plain | #'org-roam-capture--get-point | %? | :file-name | %(qz/utc-timestamp)-${slug} | :head | #+setupfile:./hugo_setup.org |

*** capture templates, dailies :vars:
#+begin_src emacs-lisp
(setq org-roam-dailies-capture-templates
      `(("d" "default" entry (function org-roam-capture--get-point)
         "* %<%H:%m> %?\nCREATED: %u"
         :file-name  "private-%<%Y-%m-%d>"
         :head "#+title: <%<%Y-%m-%d>>\n#+roam_tags: daily private\n\n")))
#+end_src

#+RESULTS:
| d | default | entry | #'org-roam-capture--get-point | * %<%H:%m> %? |

*** migrate properties :func:
#+begin_src emacs-lisp
(defun qz/org-roam-migrate-jobs ()
  (interactive )
  (dolist (file (org-roam--list-all-files))
                                        ;(message "processing %s" file)
    (with-current-buffer (or (find-buffer-visiting file)
                             (find-file-noselect file))
      ;; TODO = project
      (vulpea-project-update-tag)

      (save-buffer))))
#+end_src

#+RESULTS:
: qz/org-roam-migrate-jobs
*** auto populate FILETAG :func:
https://d12frosted.io/posts/2020-06-25-task-management-with-roam-vol3.html

#+begin_src emacs-lisp
(defun vulpea-ensure-filetag ()
  "Add respective file tag if it's missing in the current note."
  (interactive)
  (let ((tags (org-roam--extract-tags-prop
               (buffer-file-name
                (buffer-base-buffer)))))
    (when (and (seq-contains-p tags "person")
               (null (org-roam--extract-global-props-keyword
                      '("filetags"))))
      (let ((tag (qz/title-to-tag (+org-get-global-property "title"))))
        (progn (message tag)
               (qz/org-roam-add-tag tag t))))))

(defun vulpea-tags-add ()
  "Add a tag to current note."
  (interactive)
  (when (org-roam-tag-add)
    (vulpea-ensure-filetag)))

(defun qz/roam-dispatch-person (title)
  "add tag to headline for PERSON"
  (save-excursion
    (ignore-errors
      (org-back-to-heading)
      (org-set-tags
       (seq-uniq
        (cons
         (vulpea--title-to-tag title)
         (org-get-tags nil t)))))))

(setq qz/roam-tag-dispatch
      '(("person" . qz/roam-dispatch-person)))

(defun qz/roam-insert ()
  "Insert a link to the note."
  (interactive)
  (when-let*
      ((res (org-roam-insert))
       (path (plist-get res :path))
       (title (plist-get res :title))
       (roam-tags (org-roam-with-file path nil
                    (org-roam--extract-tags path))))
    (when (seq-contains-p roam-tags "person")
      (qz/roam-dispatch-person title)
      (save-buffer res))))

(defun vulpea-project-p ()
  "Return non-nil if current buffer has any todo entry.

TODO entries marked as done are ignored, meaning the this
function returns nil if current buffer contains only completed
tasks.

(1) parse the buffer using org-element-parse-buffer. It
  returns an abstract syntax tree of the current Org buffer. But
  since we care only about headings, we ask it to return only them
  by passing a GRANULARITY parameter - 'headline. This makes
  things faster.

(2) Then we extract information about TODO keyword from
  headline AST, which contains a property we are interested in -
  :todo-type, which returns the type of TODO keyword according to
  org-todo-keywords - 'done, 'todo or nil (when keyword is not
  present).

(3) Now all we have to do is to check if the buffer list contains
  at least one keyword with 'todo type. We could use seq=find on
  the result of org-element-map, but it turns out that it provides
  an optional first-match argument that can be used for our needs."
  (org-element-map                          ; (2)
      (org-element-parse-buffer 'headline) ; (1)
      'headline
    (lambda (h)
      (eq (org-element-property :todo-type h)
          'todo))
    nil 'first-match))                     ; (3)

(defun vulpea-project-update-tag ()
  "Update PROJECT tag in the current buffer."
  (when (and (not (active-minibuffer-window))
             (vulpea-buffer-p))
    (let* ((file (buffer-file-name (buffer-base-buffer)))
           (all-tags (org-roam--extract-tags file))
           (prop-tags (org-roam--extract-tags-prop file))
           (tags prop-tags))
      (if (vulpea-project-p)
          (setq tags (cons "project" tags))
        (setq tags (remove "project" tags)))
      (if (and (vulpea-buffer-p) (qz/private-p))
          (setq tags (cons "private" tags))
        (setq tags (remove "private" tags)))
      (unless (eq prop-tags tags)
        (org-roam--set-global-prop
         "ROAM_TAGS"
         (combine-and-quote-strings (seq-uniq tags)))))))

(defun vulpea-buffer-p ()
  "Return non-nil if the currently visited buffer is a note."
  (interactive)
  (and buffer-file-name
       (string-prefix-p
        (expand-file-name (file-name-as-directory org-roam-directory))
        (file-name-directory buffer-file-name))))

(defun vulpea-project-files ()
  "Return a list of note files containing Project tag."
  (seq-map
   #'car
   (org-roam-db-query
    [:select file
     :from tags
     :where (like tags (quote "%\"project\"%"))])))

(defun vulpea-agenda-files-update (&rest _)
  "Update the value of `org-agenda-files'."
  (setq org-agenda-files
        (seq-uniq
         (append qz/org-agenda-files (vulpea-project-files)))))



(advice-add 'org-agenda :before #'vulpea-agenda-files-update)
#+end_src

#+RESULTS:
*** testing
#+begin_src emacs-lisp
(qz/pprint    (append qz/org-agenda-files (vulpea-project-files)))
#+end_src

#+RESULTS:
#+begin_example

("/home/qzdl/life/roam/calendar-home.org" "/home/qzdl/life/roam/calendar-work.org"
 "/home/qzdl/life/roam/schedule.org"
 "/home/qzdl/life/roam/20210505T162454Z-interactive_network_visualization_with_r_r_bloggers.org"
 "/home/qzdl/life/roam/private-2020-12-09.org"
 "/home/qzdl/life/roam/20200701T153403Z-common_lisp_the_language.org"
 "/home/qzdl/life/roam/20200619T215855Z-common_lisp_repl_diaries.org"
 "/home/qzdl/life/roam/20200605T122503Z-meeting_innovation_et_al_0.org"
 "/home/qzdl/life/roam/20210518T124941Z-building_living.org"
 "/home/qzdl/life/roam/20200701T103013Z-counsel_spotify.org"
 "/home/qzdl/life/roam/20200606T175037Z-marvel_movie_timeline_the_best_order_to_watch_marvel_movies.org"
 "/home/qzdl/life/roam/20200405160940-meditation_apps_are_fueling_tech_addiction_not_easing_stress.org"
 "/home/qzdl/life/roam/20210311T122210Z-tennet_hierarchical_lists.org"
 "/home/qzdl/life/roam/20200403151517-a_beginner_s_guide_to_graph_visualization.org"
 "/home/qzdl/life/roam/next.org"
 "/home/qzdl/life/roam/20210427T143800Z-disturbing_films.org"
 "/home/qzdl/life/roam/20201117T102439Z-augmenting_human_intellect_a_conceptual_framework.org"
 "/home/qzdl/life/roam/20200515T113542Z-igraph.org"
 "/home/qzdl/life/roam/20200611T112619Z-autovacuum.org"
 "/home/qzdl/life/roam/20200515T152023Z-pl_pgsql.org"
 "/home/qzdl/life/roam/private-2020-08-30.org"
 "/home/qzdl/life/roam/20210404T152634Z-learning_mathematics.org"
 "/home/qzdl/life/roam/20201117T102439Z-augmenting_human_intellect.org"
 "/home/qzdl/life/roam/20200611T115532Z-pg_stat_database.org"
 "/home/qzdl/life/roam/20200623T081435Z-pg_deploy.org"
 "/home/qzdl/life/roam/20210422T104455Z-org_roam_database_machinations.org"
 "/home/qzdl/life/roam/private-2020-10-20.org"
 "/home/qzdl/life/roam/20201031T163512Z-jessealdridge_electric_toothbrush_simple_client_server_notetaking_tool_inspired_by_notational_velocity.org"
 "/home/qzdl/life/roam/20200615T082229Z-moving_to_berlin.org"
 "/home/qzdl/life/roam/watching.org"
 "/home/qzdl/life/roam/jorge_luis_borges.org"
 "/home/qzdl/life/roam/private-2020-06-02.org"
 "/home/qzdl/life/roam/20200511T151311Z-information_and_the_universe.org"
 "/home/qzdl/life/roam/private-2020-12-10.org"
 "/home/qzdl/life/roam/private-2021-04-04.org"
 "/home/qzdl/life/roam/schedule.org"
 "/home/qzdl/life/roam/20200419T194507Z-microgreens.org"
 "/home/qzdl/life/roam/20200903T080046Z-tpcde_728_monitor_filter_performance_thinkproject_jira.org"
 "/home/qzdl/life/roam/wip.org"
 "/home/qzdl/life/roam/20200609T150107Z-how_to_get_a_list_of_video_capture_devices_web_cameras_on_linux_ubuntu_c_c_stack_overflow.org"
 "/home/qzdl/life/roam/private-2021-04-20.org"
 "/home/qzdl/life/roam/private-2021-05-23.org"
 "/home/qzdl/life/roam/learning.org"
 "/home/qzdl/life/roam/20210524T190500Z-static_equilibrium_constraint.org"
 "/home/qzdl/life/roam/20200515T082816Z-org_roam_network_analysis.org"
 "/home/qzdl/life/roam/reading.org"
 "/home/qzdl/life/roam/inbox.org"
 "/home/qzdl/life/roam/20200609T132052Z-projects.org")
#+end_example

*** auto hooks :func:
#+begin_src emacs-lisp
(add-hook 'find-file-hook #'vulpea-project-update-tag)
(add-hook 'before-save-hook #'vulpea-project-update-tag)
(add-hook 'before-save-hook #'vulpea-ensure-filetag)
#+end_src

#+RESULTS:
| vulpea-ensure-filetag | vulpea-project-update-tag |
*** convert title into tag :func:
#+begin_src emacs-lisp
(defun qz/title-to-tag (title)
  "Convert TITLE to tag."
  (if (equal "@" (subseq title 0 1))
      title
    (concat "@" (s-replace " " "" title))))
#+end_src

#+RESULTS:
: qz/title-to-tag

*** determine if a file should-be-private-p :func:
might be better to use the file prop, but maybe we keep the message in to deem

#+begin_src emacs-lisp
(defun qz/private-p ()
  (interactive)

  (let ((title (+org--get-property "title")))
                                        ;(message (concat "...checking privateness of " title))
    (if (not title)
        (message "WARNING: unable to evaluate privateness; file [" file "] has no title")
      (or (string-match-p ".?[0-9]\\{4\\}-[0-9]\\{2\\}-[0-9]\\{2\\}.?" title)
          (string-match-p "meeting" title)
          (qz/org-roam-has-link-to-p title "thinkproject")))))

(defun qz/should-be-private-p (file)
  (with-current-buffer (or (find-buffer-visiting file)
                           (find-file-noselect file))
    (qz/private-p)))

(defun qz/is-file-private ()
  (interactive)
  (message (concat "should " (f-this-file) " be private..? "
                   (or (and (qz/should-be-private-p (f-this-file)) "yes") "no"))))
#+end_src

#+RESULTS:
: qz/is-file-private
*** get list of private notes
#+begin_src emacs-lisp
(defun qz/org-roam-private-files ()
  "Return a list of note files containing tag =private="
  (seq-map
   #'car
   (org-roam-db-query
    [:select file
     :from tags
     :where (like tags (quote "%\"private\"%"))])))

;(qz/pprint (qz/org-roam-private-files))
#+end_src

#+RESULTS:
: qz/org-roam-private-files


*** has link to
good for restricting to work stuff

#+begin_src emacs-lisp
(defun qz/has-link-to (src dst)
  (org-roam-db-query
   [:select source
    :from links
    :where (and (= dest $r1)
                (= source $r2))]
   src dest))

(defun qz/has-link (a b)
  (seq-map
   #'car
   (org-roam-db-query
    [:select [source dest]
     :from links
     :where (or (and (= dest a) (= source b))
                (and (= dest b) (= source a)))])))

                                        ;(org-roam-db-query
                                        ; [:select *
                                        ;  :from links
                                        ;  :where (and (= dest $r1)
                                        ;              (= source $r2))]
                                        ; "/home/qzdl/life/roam/20200401201707-thinkproject.org"
                                        ; "/home/qzdl/life/roam/20210311T113202Z-chris_heimann.org")
                                        ;
                                        ;(qz/has-link-to
                                        ; "/home/qzdl/life/roam/20210311T113202Z-chris_heimann.org"
                                        ; "/home/qzdl/life/roam/20200401201707-thinkproject.org"))
#+end_src

#+RESULTS:

*** a
#+begin_src emacs-lisp
(org-roam-db-query
    [:select *
     :from links
     :limit 10])
#+end_src

#+RESULTS:
| /home/qzdl/life/roam/20200402200035-what_is_hierarchy_in_this_sense_of_information_representation.org | /home/qzdl/life/roam/20200402200009-what_are_the_implications_of_thinking_in_hierarchies_with_regard_to_associating_and_understanding.org | file | (:outline nil :point 150)  |
| /home/qzdl/life/roam/20200402200035-what_is_hierarchy_in_this_sense_of_information_representation.org | /home/qzdl/life/roam/20200410185030-focus_question.org                                                                                    | file | (:outline nil :point 78)   |
| /home/qzdl/life/roam/20200403150915-der_zettelkasten_als_zweitgedachtnis_niklas_luhmanns.org          | /home/qzdl/life/roam/20200403151210-johannes_schmidt.org                                                                                  | file | (:outline nil :point 232)  |
| /home/qzdl/life/roam/20200403150915-der_zettelkasten_als_zweitgedachtnis_niklas_luhmanns.org          | /home/qzdl/life/roam/20200403143144-zettlekasten.org                                                                                      | file | (:outline nil :point 166)  |
| /home/qzdl/life/roam/20200403150915-der_zettelkasten_als_zweitgedachtnis_niklas_luhmanns.org          | /home/qzdl/life/roam/20200610T104431Z-german_language.org                                                                                 | file | (:outline nil :point 111)  |
| /home/qzdl/life/roam/the_personal_analytics_of_my_life_stephen_wolfram_writings.org                   | /home/qzdl/life/roam/20200511T151311Z-information_and_the_universe.org                                                                    | file | (:outline nil :point 1320) |
| /home/qzdl/life/roam/the_personal_analytics_of_my_life_stephen_wolfram_writings.org                   | /home/qzdl/life/roam/20200414200342-night_owl.org                                                                                         | file | (:outline nil :point 1194) |
| /home/qzdl/life/roam/the_personal_analytics_of_my_life_stephen_wolfram_writings.org                   | /home/qzdl/life/roam/20200515T160040Z-a_new_kind_of_science.org                                                                           | file | (:outline nil :point 967)  |
| /home/qzdl/life/roam/the_personal_analytics_of_my_life_stephen_wolfram_writings.org                   | /home/qzdl/life/roam/20200414193742-treadmill_desk.org                                                                                    | file | (:outline nil :point 885)  |
| /home/qzdl/life/roam/the_personal_analytics_of_my_life_stephen_wolfram_writings.org                   | /home/qzdl/life/roam/20200515T115551Z-quantified_self.org                                                                                 | file | (:outline nil :point 425)  |

*** make private by tagging "private" :func:
#+begin_src emacs-lisp
(defun qz/org-roam-make-private ()
  (interactive)
  (qz/org-roam-add-tag "private" t))
#+end_src

#+RESULTS:
: qz/org-roam-make-private

*** reset; clear automated roam_tags, filetags

*** TODO check if file has links to given note :func:
[[file:../../../life/roam/20210422T104455Z-org_roam_database_machinations.org][org-roam database machinations]]
#+begin_src emacs-lisp
(defun qz/org-roam-has-link-to-p (source dest)
  "TODO implement; returns t/nil if source links to dest"
  nil)
#+end_src

#+RESULTS:
: qz/org-roam-has-link-to-p

*** add global prop, preserving existing :func:
#+begin_src emacs-lisp
(defun qz/org-roam-add-global-prop (prop val)
  (org-roam--set-global-prop
   prop
   (combine-and-quote-strings
    (seq-uniq
     (cons val (split-string-and-unquote
                (or (+org--get-property prop) "")))))))
#+end_src

#+RESULTS:
: qz/org-roam-add-global-prop

*** add roam_tag, preserving existing :func:
#+begin_src emacs-lisp
(defun qz/org-roam-add-tag (tag &optional filetag_too)
  (qz/org-roam-add-global-prop "roam_tags" tag)
  (when filetag_too
    (qz/org-roam-add-global-prop "filetags" tag)))
#+end_src

#+RESULTS:
: qz/org-roam-add-tag

*** TODO auto establish meta :func:
*** TODO auto tag youtube videos
#+begin_src emacs-lisp
(defun qz/format-link-from-title (title)
  (let ((file (org-roam-link--get-file-from-title title)))
    (and file (org-roam-format-link file title))))

(defun qz/roam-auto-youtube-video ()
  (interactive)
  (let ((key (+org--get-property "roam_key")))
    (when (string-match "YouTube" key)
      (let*
        ((channel+url (qz/roam-key->yt-channel key))
         (link (qz/format-link-from-title (first channel+url)))
         (channel (or link (concat "[[roam:" (first channel+url) "]]")))
         (str
          (concat "A "
                  (qz/format-link-from-title "YouTube") " "
                  (qz/format-link-from-title "video") " from "
                  channel)))
        (insert str)))))
#+end_src

#+RESULTS:
: qz/roam-auto-youtube-video


*** TODO scrape youtube channel

#+begin_src emacs-lisp
(defun qz/roam-key->yt-channel (key)
  (let ((str (shell-command-to-string
              (concat
               "youtube-dl " key "--skip-download --dump-json | "
               "python -c 'import sys;import json;b=json.loads(sys.stdin.read());print(b.get(\"channel\")+\",\"+b.get(\"channel_url\"))'"))))
    (message str)
    (and str (split-string str ","))))

;(qz/roam-key->yt-channel "https://www.youtube.com/watch?v=KopB4l5QkEg")
#+end_src

#+RESULTS:
| HexiBase | https://www.youtube.com/channel/UCtpB66XKjAtFZfZyzmC-_Cg |


**** what a journey
#+begin_src bash :results raw drawer :tangle no
youtube-dl --skip-download --dump-json https://www.youtube.com/watch?v=KopB4l5QkEg | python -c 'import json;import sys;print(json.loads(sys.stdin.read()).get("channel"))'
#+end_src

#+RESULTS:
:results:
HexiBase
:end:


#+begin_src python  :results output :tangle no
import json
c = None
with open('./ytdl.json') as f:
    c = json.loads(f.read())

print(c.get('channel'))
#+end_src

#+RESULTS:
: HexiBase


*** TODO Run analysis :func:
Run analysis from source file on org-roam DB
- restrict graph (e.g. exclude sensitive information)
*** headline parsing function
#+begin_src emacs-lisp
(defun qz/get-headline-path (&optional self? reverse? sepf)
  (interactive)
  (let* ((s (or sepf
                (lambda (i)
                  (if (< 0 i) " -> " ""))))
         (c (org-get-outline-path self?)))
    (insert "\n")
    (cl-loop
     for e in (if reverse? (reverse c) c)
     for i = 0 then (1+ i)
     do (insert (funcall s i) e))))

(defun qz/headline-mm (i)
  (if (< 0 i)
      (concat "\n" (make-string i ?	)) ""))

;; example, for https://tobloef.com/text2mindmap/ + [[file:../../../life/roam/20210521T102710Z-the_great_ideas_vol_ii.org][The Great Ideas, Vol II]]
;;(qz/get-headline-path t t 'qz/headline-mm)


;; (progn
;;   (qz/get-headline-path)
;;   (qz/get-headline-path nil t)
;;   (qz/get-headline-path t)
;;   (qz/get-headline-path t t)
;;   (qz/get-headline-path t t 'qz/headline-mm)
;;   (qz/get-headline-path t nil 'qz/headline-mm)
;;   (qz/get-headline-path nil nil 'qz/headline-mm))
#+end_src

#+RESULTS:
: qz/headline-mm
*** TODO transform an org subtree, into mindmap for ttmm :ttmm:
tab delimit
given a subtree (at point)

*** TODO query slice of headlines, containing REGEXP, build path with [[headline parsing function]]

*** org-roam-server :init:vars:
[[https://github.com/org-roam/org-roam-server][GitHub - org-roam/org-roam-server]]
#+begin_src emacs-lisp
(use-package! org-roam-server
  :config
  (setq org-roam-server-host "127.0.0.1"
        org-roam-server-port 8080
        org-roam-server-export-inline-images t
        org-roam-server-authenticate nil
        org-roam-server-network-label-truncate t
        org-roam-server-network-label-truncate-length 60))
#+end_src

#+RESULTS:
: t

** org-noter
*** qz/insert-note :func:
#+begin_src emacs-lisp
(defun qz/org-noter-insert-note (notetext &optional precise-info)
  "Insert note associated with the current location.

This command will prompt for a title of the note and then insert
it in the notes buffer. When the input is empty, a title based on
`org-noter-default-heading-title' will be generated.

If there are other notes related to the current location, the
prompt will also suggest them. Depending on the value of the
variable `org-noter-closest-tipping-point', it may also suggest
the closest previous note.

PRECISE-INFO makes the new note associated with a more
specific location (see `org-noter-insert-precise-note' for more
info).

When you insert into an existing note and have text selected on
the document buffer, the variable `org-noter-insert-selected-text-inside-note'
defines if the text should be inserted inside the note."
  (interactive)
  (org-noter--with-valid-session
   (message "double yeet")
   (let* ((ast (org-noter--parse-root)) (contents (org-element-contents ast))
          (window (org-noter--get-notes-window 'force))
          (selected-text
           (cond
            ((eq (org-noter--session-doc-mode session) 'pdf-view-mode)
             (when (pdf-view-active-region-p)
               (mapconcat 'identity (pdf-view-active-region-text) ? )))

            ((eq (org-noter--session-doc-mode session) 'nov-mode)
             (when (region-active-p)
               (buffer-substring-no-properties (mark) (point))))))
          force-new
          (location (org-noter--doc-approx-location (or precise-info 'interactive) (gv-ref force-new)))
          (view-info (org-noter--get-view-info (org-noter--get-current-view) location)))

     (let ((inhibit-quit t))
       (with-local-quit
         (select-frame-set-input-focus (window-frame window))
         (select-window window)

         ;; IMPORTANT(nox): Need to be careful changing the next part, it is a bit
         ;; complicated to get it right...

         (let ((point (point))
               (minibuffer-local-completion-map org-noter--completing-read-keymap)
               collection default default-begin title selection
               (empty-lines-number (if org-noter-separate-notes-from-heading 2 1)))

           (cond
            ;; NOTE(nox): Both precise and without questions will create new notes
            ((or precise-info force-new)
             (setq default (and selected-text (replace-regexp-in-string "\n" " " selected-text))))
            (org-noter-insert-note-no-questions)
            (t
             (dolist (note-cons (org-noter--view-info-notes view-info))
               (let ((display (org-element-property :raw-value (car note-cons)))
                     (begin (org-element-property :begin (car note-cons))))
                 (push (cons display note-cons) collection)
                 (when (and (>= point begin) (> begin (or default-begin 0)))
                   (setq default display
                         default-begin begin))))))

           (setq collection (nreverse collection)
                 title (if org-noter-insert-note-no-questions
                           default
                         notetext)
                 selection (unless org-noter-insert-note-no-questions (cdr (assoc title collection))))

           (if selection
               ;; NOTE(nox): Inserting on an existing note
               (let* ((note (car selection))
                      (insert-before-element (cdr selection))
                      (has-content
                       (eq (org-element-map (org-element-contents note) org-element-all-elements
                             (lambda (element)
                               (if (org-noter--check-location-property element)
                                   'stop
                                 (not (memq (org-element-type element) '(section property-drawer)))))
                             nil t)
                           t)))
                 (when has-content (setq empty-lines-number 2))
                 (if insert-before-element
                     (goto-char (org-element-property :begin insert-before-element))
                   (goto-char (org-element-property :end note)))


                 (if (org-at-heading-p)
                     (progn
                       (org-N-empty-lines-before-current empty-lines-number)
                       (forward-line -1))
                   (unless (bolp) (insert "\n"))
                   (org-N-empty-lines-before-current (1- empty-lines-number)))

                 (when (and org-noter-insert-selected-text-inside-note selected-text) (insert selected-text)))

             ;; NOTE(nox): Inserting a new note
             (let ((reference-element-cons (org-noter--view-info-reference-for-insertion view-info))
                   level)
               (when (zerop (length title))
                 (setq title (replace-regexp-in-string (regexp-quote "$p$") (number-to-string (car location))
                                                       org-noter-default-heading-title)))

               (if reference-element-cons
                   (progn
                     (cond
                      ((eq (car reference-element-cons) 'before)
                       (goto-char (org-element-property :begin (cdr reference-element-cons))))
                      ((eq (car reference-element-cons) 'after)
                       (goto-char (org-element-property :end (cdr reference-element-cons)))))

                     ;; NOTE(nox): This is here to make the automatic "should insert blank" work better.
                     (when (org-at-heading-p) (backward-char))

                     (setq level (org-element-property :level (cdr reference-element-cons))))

                 (goto-char (org-element-map contents 'section
                              (lambda (section) (org-element-property :end section))
                              nil t org-element-all-elements))
                 (setq level (1+ (org-element-property :level ast))))

               ;; NOTE(nox): This is needed to insert in the right place
               (outline-show-entry)
               (org-noter--insert-heading level title empty-lines-number location)
               (when (org-noter--session-hide-other session) (org-overview))

               (setf (org-noter--session-num-notes-in-view session)
                     (1+ (org-noter--session-num-notes-in-view session)))))

           (org-show-set-visibility t)
           (org-cycle-hide-drawers 'all)
           (org-cycle-show-empty-lines t)))
       (when quit-flag
         ;; NOTE(nox): If this runs, it means the user quitted while creating a note, so
         ;; revert to the previous window.
         (select-frame-set-input-focus (org-noter--session-frame session))
         (select-window (get-buffer-window (org-noter--session-doc-buffer session))))))))
#+end_src

#+RESULTS:
: qz/org-noter-insert-note

*** TODO can we please AUTO/org-roam create a missing note?
See <link-to-elisp-doc 'org-noter-notes-search-path> and cry

** org-ref
https://github.com/jkitchin/org-ref
#+begin_src emacs-lisp
(require 'org-ref)
(setq reftex-bib-path  '("~/life/tex.bib")
      reftex-default-bibliography reftex-bib-path
      org-ref-default-bibliography reftex-bib-path)
#+end_src

#+RESULTS:
| ~/life/tex.bib |

** [[file:../../../life/roam/20200612T111528Z-org_agenda.org][org-agenda]]
*** init :init:
- refiling targets
  - read (book, article, paper, research)
  - watch (film, youtube, etc)
  - wip (any)

- views
  - overview
    - scheduled, deadlines, time-based
    - top of the list
    - processing

  - work (people)
  - doing (book, paper, article, research, wip)

#+begin_src emacs-lisp
(use-package! org-agenda
  :init
  (map! "<f1>" #'qz/switch-to-agenda)
  (setq org-agenda-block-separator nil
        org-agenda-start-with-log-mode t
        org-agenda-files (list qz/org-agenda-directory))
  (defun qz/switch-to-agenda ()
    (interactive)
    (org-agenda nil "g"))
  :config
  (setq org-columns-default-format
        "%40ITEM(Task) %Effort(EE){:} %CLOCKSUM(Time Spent) %SCHEDULED(Scheduled) %DEADLINE(Deadline)")
  (setq org-agenda-custom-commands
        `(
          ("d" "Upcoming deadlines" agenda ""
           ((org-agenda-time-grid nil)
            (org-deadline-warning-days 365)        ;; [1]
            (org-agenda-entry-types '(:deadline))  ;; [2]
            ))
          ("ww" "wip all" tags "wip")
          ("wr" "wip reading" tags "wip+reading||wip+read|reading+next")
          ("hh" tags "+habit")
          ("P" "Printed agenda"
           ((agenda "" ((org-agenda-span 7)                      ;; overview of appointments
                        (org-agenda-start-on-weekday nil)         ;; calendar begins today
                        (org-agenda-repeating-timestamp-show-all t)
                        (org-agenda-entry-types '(:timestamp :sexp))))
            (agenda "" ((org-agenda-span 1)                      ; daily agenda
                        (org-deadline-warning-days 7)            ; 7 day advanced warning for deadlines
                        (org-agenda-todo-keyword-format "[ ]")
                        (org-agenda-scheduled-leaders '("" ""))
                        (org-agenda-prefix-format "%t%s")))
            (todo "TODO"                                          ;; todos sorted by context
                  ((org-agenda-prefix-format "[ ] %T: ")
                   (org-agenda-sorting-strategy '(tag-up priority-down))
                   (org-agenda-todo-keyword-format "")
                   (org-agenda-overriding-header "\nTasks by Context\n------------------\n"))))
           ((org-agenda-with-colors nil)
            (org-agenda-compact-blocks t)
            (org-agenda-remove-tags t)
            (ps-number-of-columns 2)
            (ps-landscape-mode t))
           ("~/agenda.ps"))
          ;; other commands go here
          )))

                                        ;(defun qz/rg-get-files-with-tags ()
                                        ;  "Returns a LIST of files that contain TAGS (currently, just `TODO')"
                                        ;  (split-string
                                        ;   (shell-command-to-string "rg TODO ~/life/roam/ -c | awk -F '[,:]' '{print $1}'")))
                                        ;
                                        ;(setq org-agenda-files
                                        ;      (append org-agenda-files (qz/rg-get-files-with-tags)))
#+end_src

#+RESULTS:
: t

*** Vulpea's category agenda refinement :org:
#+begin_src elisp
(setq qz/org-agenda-prefix-length 20
      org-agenda-prefix-format
      '((agenda . " %i %(vulpea-agenda-category qz/org-agenda-prefix-length)%?-12t% s")
        (todo . " %i %(vulpea-agenda-category qz/org-agenda-prefix-length) ")
        (tags . " %i %(vulpea-agenda-category qz/org-agenda-prefix-length) ")
        (search . " %i %(vulpea-agenda-category qz/org-agenda-prefix-length) ")))

(defun vulpea-agenda-category (&optional len)
  "Get category of item at point for agenda.

Category is defined by one of the following items:
- CATEGORY property
- TITLE keyword
- TITLE property
- filename without directory and extension

When LEN is a number, resulting string is padded right with
spaces and then truncated with ... on the right if result is
longer than LEN.

Usage example:

  (setq org-agenda-prefix-format
        '((agenda . \" %(vulpea-agenda-category) %?-12t %12s\")))

Refer to `org-agenda-prefix-format' for more information."
  (let* ((file-name (when buffer-file-name
                      (file-name-sans-extension
                       (file-name-nondirectory buffer-file-name))))
         (title (car-safe (org-roam--extract-titles-title)))
         (category (org-get-category))
         (result
          (or (if (and
                   title
                   (string-equal category file-name))
                  title
                category)
              "")))
    (if (numberp len)
        (s-truncate len (s-pad-right len " " result))
      result)))
#+end_src

#+RESULTS:
: vulpea-agenda-category
*** agenda view, gtd :func:vars:
#+begin_src emacs-lisp
(defun qz/org-agenda-gtd ()
  (interactive)
  (org-agenda nil "g")
  (org-agenda-goto-today))

(setq org-agenda-custom-commands nil)
(add-to-list
 'org-agenda-custom-commands
 `("g" "GTD"
   ((agenda "" ((org-agenda-span 'day) (org-deadline-warning-days 60)))
    (tags-todo "wip"
               ((org-agenda-overriding-header "wip")))
    (todo "TODO"
          ((org-agenda-overriding-header "To Refile")
           (org-agenda-files '(,(concat qz/org-agenda-directory "inbox.org")))))
    (todo "TODO"
          ((org-agenda-overriding-header "Emails")
           (org-agenda-files '(,(concat qz/org-agenda-directory "emails.org")))))
    (todo "TODO"
          ((org-agenda-overriding-header "One-off Tasks")
           (org-agenda-files '(,(concat qz/org-agenda-directory "next.org"))))))))
    ;;        (org-agenda-skip-function '(org-agenda-skip-entry-if 'deadline 'scheduled))))

(qz/pprint org-agenda-custom-commands)
#+end_src
*** safer org defer whaever

#+begin_src emacs-lisp
 (defun +org-defer-mode-in-agenda-buffers-h ()
      "`org-agenda' opens temporary, incomplete org-mode buffers.
I've disabled a lot of org-mode's startup processes for these invisible buffers
to speed them up (in `+org--exclude-agenda-buffers-from-recentf-a'). However, if
the user tries to visit one of these buffers they'll see a gimped, half-broken
org buffer. To avoid that, restart `org-mode' when they're switched to so they
can grow up to be fully-fledged org-mode buffers."
      (dolist (buffer org-agenda-new-buffers)
        (when (buffer-live-p buffer)
          (with-current-buffer buffer
            (add-hook 'doom-switch-buffer-hook #'+org--restart-mode-h
                      nil 'local)))))
#+end_src

#+RESULTS:
: +org-defer-mode-in-agenda-buffers-h

*** agenda view, shopping :func:vars:
#+begin_src emacs-lisp
(add-to-list
 'org-agenda-custom-commands
 '("ms" "shopping" tags "buy"))
#+end_src
#+RESULTS:
| ms | shopping           | tags| buy         |                                                                                                    |          |              |
| g  | GTD                | ((agenda  ((org-agenda-span 'day) (org-deadline-warning-days 60))) (tags-todo wip ((org-agenda-overriding-header wip))) (todo TODO ((org-agenda-overriding-header To Refile) (org-agenda-files '(~/life/roam/inbox.org)))) (todo TODO ((org-agenda-overriding-header Emails) (org-agenda-files '(~/life/roam/emails.org)))) (todo NEXT ((org-agenda-overriding-header Silo) (org-agenda-files '(~/life/roam/someday.org ~/life/roam/projects.org ~/life/roam/next.org)))) (todo TODO ((org-agenda-overriding-header Projects) (org-agenda-files '(~/life/roam/projects.org)))) (todo TODO ((org-agenda-overriding-header One-off Tasks) (org-agenda-files '(~/life/roam/next.org)) (org-agenda-skip-function '(org-agenda-skip-entry-if 'deadline 'scheduled))))) |             |                                                                                                    |          |              |
| d  | Upcoming deadlines | agenda|             | ((org-agenda-time-grid nil) (org-deadline-warning-days 365) (org-agenda-entry-types '(:deadline))) |          |              |
| ww | wip all            | tags                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              | wip         |                                                                                                    |          |              |
| wr | wip reading        | tags| wip+reading |                                                                                                    | wip+read | reading+next |
| hh | tags               | +habit|             |                                                                                                    |          |              |
| P  | Printed agenda     | ((agenda  ((org-agenda-span 7) (org-agenda-start-on-weekday nil) (org-agenda-repeating-timestamp-show-all t) (org-agenda-entry-types '(:timestamp :sexp)))) (agenda  ((org-agenda-span 1) (org-deadline-warning-days 7) (org-agenda-todo-keyword-format [ ]) (org-agenda-scheduled-leaders '( )) (org-agenda-prefix-format %t%s))) (todo TODO ((org-agenda-prefix-format [ ] %T: ) (org-agenda-sorting-strategy '(tag-up priority-down)) (org-agenda-todo-keyword-format ) (org-agenda-overriding-header                                                                                                                                                                                                                                                          |             |                                                                                                    |          |              |

*** agenda view, TODO :func:
#+begin_src emacs-lisp
(defun qz/org-agenda-todo ()
  (interactive)
  (org-agenda nil "t"))
#+end_src

*** TODO agenda view, wip
#+begin_src emacs-lisp 
#+end_src

*** TODO agenda view, calendar

*** map :kbd:
#+begin_src emacs-lisp
(map! :map org-agenda-mode-map
      "J" #'qz/org-agenda-process-inbox
      "C-j" #'qz/org-agenda-process-item
      "R" #'org-agenda-refile)
#+end_src

#+RESULTS:

*** process agenda item :func:
- Give the task some location context. Tagging the task with tags @work and
  @home means I can work on this appropriately
- Give the task a priority level, between A, B, and C. Here’s how I decide a
  priority. It’s a pretty loose dichotomy, but works for me.
  - A: Tasks that must get done regardless.
  - B: Tasks that should get done, but only after Priority A tasks.
  - C: Tasks that are good to get done, but not compulsory.
- Give the task an effort estimate. This is in the format HH:MM, if the task is
  estimated to take days, perhaps it needs to be broken down further.
- Refile the item. Here my tasks get assigned to a selection from relevant
  refile targets.
#+begin_src emacs-lisp

(setq org-agenda-bulk-custom-functions '((?b . #'qz/org-agenda-process-item)))

(defun qz/org-process-inbox ()
  "Called in org-agenda-mode, processes all inbox items."
  (interactive)
  (org-agenda-bulk-mark-regexp "inbox:")
  (org-agenda-bulk-action ?b))


(defun qz/org-agenda-process-item ()
  "Process a single item in the org-agenda."
  (interactive)
  (org-with-wide-buffer
   (org-agenda-set-tags)
   (org-agenda-priority)
   (org-agenda-refile nil nil t)))
#+end_src

#+RESULTS:
: qz/org-agenda-process-item


*** TODO processing bulk agenda :func:
#+begin_src emacs-lisp

#+end_src

#+RESULTS:
: qz/org-process-inbox


*** tags
#+begin_src emacs-lisp
(setq org-tag-alist
      '(("@errand" . ?e)
        ("@work" . ?w)
        ("@home" . ?h)
        ("@blog" . ?B)
        (:newline)
        ("emacs" . ?E)
        ("wip" . ?W)
        ("CANCELLED" . ?c)
        (:newline)
        ("learning" . ?l)
        ("research" . ?r)
        (:newline)
        (:newline)
        ("book" . ?b)
        ("article" . ?a)
        ("paper" . ?p)
        (:newline)
        (:newline)
        ("talk" . ?t)
        ("film" . ?f)))
#+end_src

#+RESULTS:
: ((@errand . 101) (@work . 119) (@home . 104) (@blog . 66) (:newline) (emacs . 69) (wip . 87) (CANCELLED . 99) (:newline) (learning . 108) (research . 114) (:newline) (:newline) (book . 98) (article . 97) (paper . 112) (:newline) (:newline) (talk . 116) (film . 102))
** org-super-agenda
#+begin_src emacs-lisp
(require 'org-super-agenda)

#+end_src

** TODO [[file:../../../life/roam/20200722T143300Z-org_drill.org][org-drill]]
** ox (export)
#+begin_src emacs-lisp
(require 'ox-reveal)
#+end_src

#+RESULTS:
: ox-reveal
* mathpix
#+begin_src emacs-lisp
(require 'mathpix)
(setq mathpix-screenshot-method "scrot -s %s")

(map! "C-c o m" #'qz/mathpix-screenshot)
;; add var capture
(defun qz/mathpix-screenshot ()
  "Capture screenshot and send result to Mathpix API."
  (interactive)
  (let
      ((default-directory "~"))
    (make-directory
     (file-name-directory mathpix-screenshot-file)
     t)
    (if
        (functionp mathpix-screenshot-method)
        (funcall mathpix-screenshot-method mathpix-screenshot-file)
      (shell-command-to-string
       (format mathpix-screenshot-method mathpix-screenshot-file)))
    (if
        (file-exists-p mathpix-screenshot-file)
        (progn
          (insert
           (setq mathpix-last-result
                 (mathpix-get-result mathpix-screenshot-file)))
          (delete-file mathpix-screenshot-file)))))
#+end_src

#+RESULTS:
: qz/mathpix-screenshot

* TODO GNUs
Following [[https://www.emacswiki.org/emacs/GnusTutorial][EmacsWiki: Gnus Tutorial]]

* TODO Completion
** orderless
ideally the ordering should account ~match, last-used, degree~
** TODO find out about company component delimiters for inputting spaces and stuff
#+begin_src emacs-lisp
                                        ;(require 'orderless)
                                        ;(setq completion-styles '(orderless))
                                        ;(icomplete-mode) ; optional but recommended!
                                        ;
                                        ;(setq orderless-component-separator "[ &]")
                                        ;(setq company-idle-delay 0.1
                                        ;      company-minimum-prefix-length 1)
                                        ;
                                        ; highlight matching parcnfts
(defun just-one-face (fn &rest args)
  (let ((orderless-match-faces [completions-common-part]))
    (apply fn args)))

(advice-add 'company-capf--candidates :around #'just-one-face)

(use-package! orderless
  :config
  (after! ivy
    (setq ivy-re-builders-alist '((t . orderless-ivy-re-builder)))))
#+end_src

#+RESULTS:
: t
*
